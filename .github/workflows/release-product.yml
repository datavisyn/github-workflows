name: release-product

on:
  workflow_call:
    secrets:
      DATAVISYN_BOT_REPO_TOKEN:
        required: true

permissions:
  contents: write

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GA_VERSION: "main"
  GITHUB_USER: "datavisyn-bot"
  WORKFLOW_BRANCH: "vdelev_auto_releasenotes"

jobs:
  ###############################################################################################################
  ## CREATE RELEASE CANDIDATE: to start the release
  ###############################################################################################################
  create-release-candidate:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-22.04
    steps:
      - name: check branch
        if: ${{ github.ref_name != 'develop' && !startsWith(github.ref_name, 'develop') }}
        run: |
          echo "only the develop branches can be released: $GITHUB_REF"
          exit 1
        env:
          GITHUB_REF: ${{ github.ref_name }}
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v4
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/check-actor
        with:
          dv_devops: ${{ vars.DV_DEVOPS }}
          dv_qms: ${{ vars.DV_QMS }}
          actor: ${{ github.actor }}
          qms_are_allowed: "true"
      - name: read known repositories
        id: get-known-repositories
        run: |
          if [[ $REPO_IS_PRIVATE = true ]]; then
            curl -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v4.raw" \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources.json
          else
            curl -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v4.raw" \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources_public.json
          fi
          known_repositories=$(jq -c '.' ./known_repositories.json | jq -R '.')
          echo "known_repositories=${known_repositories}"
          rm ./known_repositories.json
          echo "known_repositories=$known_repositories" >> "$GITHUB_OUTPUT"
        env:
          REPO_IS_PRIVATE: ${{github.event.repository.private}}
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check repository
        id: check-repository
        run: |
          repository=$(jq  -rc '.repo' ./visyn_product.json)
          sub_app=$(jq  -rc '.sub_app' ./visyn_product.json)
          # shellcheck disable=SC2001
          repository=$(echo "$repository" | sed -e 's|.*/||')
          echo "$repository"
          echo "$sub_app"
          known_repositories=$_KNOWN_REPOSITORIES
          checked_repository="$(echo "$known_repositories" | jq -r '.' | jq --arg var "$repository" '.[$var]')"
          version="$(echo "$checked_repository" | jq -r '.version')"
          release_version="${version}_${sub_app}"
          echo "$checked_repository"
          echo "$version"
          new_branch_name=$BRANCH_NAME
          new_branch_name=${new_branch_name/develop/"rc-$release_version"}
          main_branch_name=$new_branch_name
          main_branch_name=${main_branch_name/"rc-$version"/main}
          echo "release_version=$release_version"
          echo "new_branch_name=$new_branch_name"
          echo "main_branch_name=$main_branch_name"
          # echo to output
          # shellcheck disable=SC2129
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"
          echo "new_branch_name=$new_branch_name" >> "$GITHUB_OUTPUT"
          echo "main_branch_name=$main_branch_name" >> "$GITHUB_OUTPUT"
        env:
          _KNOWN_REPOSITORIES: ${{ steps.get-known-repositories.outputs.known_repositories }}
          BRANCH_NAME: ${{ github.ref_name }}
      - name: create/get release branch
        run: |
          echo "create/get release branch"
          if git rev-parse --verify --quiet "origin/$BRANCH_NAME"; then
            echo "branch exists!"
            git checkout "$BRANCH_NAME"
          else
            echo "create branch"
            git checkout -b "$BRANCH_NAME"
          fi
        env:
          BRANCH_NAME: ${{ steps.check-repository.outputs.new_branch_name }}
      - name: prepare release
        uses: ./tmp/github-workflows/.github/actions/release-product-changes
        with:
          known_repositories: ${{ steps.get-known-repositories.outputs.known_repositories }}
          repository_version: ${{ steps.check-repository.outputs.release_version }}
          ga_version:  ${{ env.GA_VERSION }}
          prepare_release: true
      - name: delete tmp files
        run: |
          rm -rf ./tmp
      - name: setup git config
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "<>"
        env:
          GITHUB_ACTOR: ${{ github.actor }}
      - name: push branch
        run: |
          echo "push branch"
          git commit -am "[skip ci]Prepare release v$RELEASE_VERSION"
          git push origin "$BRANCH_NAME"
        env:
          RELEASE_VERSION: ${{ steps.check-repository.outputs.release_version }}
          BRANCH_NAME: ${{ steps.check-repository.outputs.new_branch_name }}
      - name: trigger build
        uses: datavisyn/github-action-trigger-workflow@v1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
          workflow_file_name: "build.yml"
          ref: "${{ steps.check-repository.outputs.new_branch_name }}"
          github_user: ${{ env.GITHUB_USER }}
      - name: create pull request
        id: create-pr
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/pulls
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          title: "Release v${{ steps.check-repository.outputs.release_version }}"
          body: 'This pr will create version v${{ steps.check-repository.outputs.release_version }}'
          head: "${{ steps.check-repository.outputs.new_branch_name }}"
          base: "${{ steps.check-repository.outputs.main_branch_name }}"
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check pr status
        if: ${{ steps.create-pr.outputs.status != 201 }}
        run: |
          echo "something went wrong with the pr"
          echo "data: $DATA"
          echo "status: $STATUS"
          exit 1
        env:
          STATUS: ${{ steps.create-pr.outputs.status }}
          DATA: ${{ steps.create-pr.outputs.data }}
  ###############################################################################################################
  ## CREATE RELEASE: after PR is merged
  ###############################################################################################################
  create-release:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.head_ref, 'rc_') }}
    runs-on: ubuntu-22.04
    steps:
      - name: check branch
        if: ${{ github.ref_name != 'main' && !startsWith(github.ref_name, 'main') }}
        run: |
          echo 'only the main branches can be released.'
          exit 1
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - uses: actions/checkout@v4
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/check-actor
        with:
          dv_devops: ${{ vars.DV_DEVOPS }}
          actor: ${{ github.actor }}
          qms_are_allowed: "false"
      - name: get release version
        id: get-release-version
        run: |
          release_version=$(jq -r '.version' ./package.json)
          main_branch_name=$BRANCH_NAME
          develop_branch_name=${main_branch_name/main/develop}
          echo "release_version=$release_version"
          echo "main_branch_name=$main_branch_name"
          echo "develop_branch_name=$develop_branch_name"
          echo "release_version=$release_version >> $GITHUB_OUTPUT"
          echo "main_branch_name=$main_branch_name >> $GITHUB_OUTPUT"
          echo "develop_branch_name=$develop_branch_name >> $GITHUB_OUTPUT"
        env:
          BRANCH_NAME: ${{ github.ref_name }}
      - name: delete release branch
        run: |
          git fetch
          git status
          if git rev-parse --verify --quiet "origin/$GITHUB_REF"; then
            echo "delete release branch: $GITHUB_REF"
            git branch -D "$GITHUB_REF"
            git push origin --delete "$GITHUB_REF"
            git status
          fi
        env:
          GITHUB_REF: ${{ github.head_ref }}
      - name: create release
        id: create-release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          tag_name: "v${{ steps.get-release-version.outputs.release_version }}"
          target_commitish: ${{ github.ref }}
          name: "v${{ steps.get-release-version.outputs.release_version }}"
          body: "release of v${{ steps.get-release-version.outputs.release_version }}"
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check release status
        if: ${{ steps.create-release.outputs.status != 201 }}
        run: |
          echo "something went wrong with the creation of the release"
          echo "data: $DATA"
          echo "status: $STATUS"
          exit 1
        env:
          STATUS: ${{ steps.create-release.outputs.status }}
          DATA: ${{ steps.create-release.outputs.data }}
      - name: git fetch
        run: |
          git status
          echo "git fetch"
          git fetch
          git checkout "$MAIN_BRANCH"
          git pull --rebase
          git checkout "$DEVELOP_BRANCH"
          git pull --rebase
          git status
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
          MAIN_BRANCH:  ${{ steps.get-release-version.outputs.main_branch_name }}
      - name: merge $MAIN_BRANCH to $DEVELOP_BRANCH
        run: |
          echo "merge main to $DEVELOP_BRANCH"
          git merge -X theirs "$MAIN_BRANCH" --allow-unrelated-histories
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
          MAIN_BRANCH:  ${{ steps.get-release-version.outputs.main_branch_name }}
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v4
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - name: read known repositories
        id: get-known-repositories
        run: |
          if [[ $REPO_IS_PRIVATE = true ]]; then
            curl -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v4.raw" \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources.json
          else
            curl -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v4.raw" \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources_public.json
          fi
          known_repositories=$( jq -c '.' ./known_repositories.json | jq -R '.')
          echo "known_repositories=${known_repositories}"
          rm ./known_repositories.json
          echo "known_repositories=$known_repositories" >> "$GITHUB_OUTPUT"
        env:
          REPO_IS_PRIVATE: ${{github.event.repository.private}}
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: prepare develop
        uses: ./tmp/github-workflows/.github/actions/release-product-changes
        with:
          known_repositories: ${{ steps.get-known-repositories.outputs.known_repositories }}
          repository_version: ${{ steps.get-release-version.outputs.release_version }}"-SNAPSHOT"
          ga_version:  main
          prepare_release: false
      - name: delete tmp files
        run: |
          rm -rf ./tmp/github-workflows
      - name: push develop
        run: |
          echo "push develop"
          git add .
          git commit --allow-empty -am "Prepare next development"
          git push origin "$DEVELOP_BRANCH"
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
