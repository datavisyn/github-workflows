name: Release product repository

on: workflow_call
     
permissions:
  contents: write

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env: 
  GA_VERSION: "main"
  GITHUB_USER: "datavisyn-bot"


jobs:
  ###############################################################################################################
  ## CREATE RELEASE CANDIDATE: to start the release
  ###############################################################################################################
  create-release-candidate:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-20.04
    steps:
      - name: check actor
        run: |
          dv_devops=$DV_DEVOPS
          actor=$GITHUB_ACTOR
          array=($(echo "${dv_devops}" | tr ',' "\n"))
          for e in "${array[@]}"; do 
            if [[ "$e" == "$actor" ]] ; then
              exit 0
            fi
          done
          echo "you are not allowed to run this job!"
          exit 1
        env: 
          DV_DEVOPS: ${{ secrets.DV_DEVOPS }}
          GITHUB_ACTOR: ${{ github.actor }}
      - name: check branch
        if: ${{ github.ref != 'refs/heads/develop' && !startsWith(github.ref, 'refs/heads/develop') }}
        run: |
          echo 'only the develop branches can be released: $GITHUB_REF'
          exit 1 
        env:
          GITHUB_REF: ${{ github.ref }}
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: main
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/get-product-parameters
        id: get-parameters
        with:
          dv_customers: ${{ secrets.DV_CUSTOMERS }}
          repository_name: ${{ github.event.repository.name }}
          branch_name: ${{ github.ref }}
          time_zone: ${{ env.TIME_ZONE }}
      - name: read known repositories
        id: get-known-repositories
        run: |
          if [[ $REPO_IS_PRIVATE = true ]]; then
            curl -H 'Authorization: token $GITHUB_TOKEN' \
              -H 'Accept: application/vnd.github.v4.raw' \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources.json
          else
            curl -H 'Authorization: token $GITHUB_TOKEN' \
              -H 'Accept: application/vnd.github.v4.raw' \
              -o known_repositories.json \
              -L https://raw.githubusercontent.com/datavisyn/github-maintenance/main/release/next_repositories_sources_public.json
          fi
          known_repositories=$(echo $(jq -c '.' ./known_repositories.json) | jq -R '.')
          echo "known_repositories=${known_repositories}"
          rm ./known_repositories.json
          echo "::set-output name=known_repositories::$known_repositories"
        env:
          REPO_IS_PRIVATE: ${{github.event.repository.private}}
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check repository
        id: check-repository
        run: |
          repository=$(jq  -rc '.[] | select(.type == "web") | .repo' ./phovea_product.json)
          repository=$(echo "$repository" | sed -e 's|.*/||')
          known_repositories=$KNOWN_REPOSITORIES
          checked_repository="$(echo $known_repositories | jq -r '.' | jq --arg var $repository '.[$var]')"
          release_version="$(echo $checked_repository | jq -r '.version')"
          sub_app=$SUB_APP
          if [[ ! -z $sub_app ]] ; then
            release_version+="-${sub_app}"
          fi
          customer=$CUSTOMER
          if [[ $customer != "datavisyn" ]] ; then
            release_version+="-${customer}"
          fi
          generator_version="$(echo $known_repositories | jq -r '."generator-phovea" | .version')"
          new_branch_name=$IMAGE_TAG2
          new_branch_name=${new_branch_name/develop/"rc_$release_version"}
          main_branch_name=$IMAGE_TAG1
          main_branch_name=${main_branch_name/develop/main}
          echo "repository=$checked_repository"
          echo "release_version=$release_version"
          echo "generator_version=$generator_version"
          echo "new_branch_name=$new_branch_name"
          echo "main_branch_name=$main_branch_name"
          echo ::set-output name=repository::${checked_repository}
          echo ::set-output name=release_version::${release_version}
          echo ::set-output name=generator_version::${generator_version}
          echo ::set-output name=new_branch_name::${new_branch_name}
          echo ::set-output name=main_branch_name::${main_branch_name}
        env:
          KNOWN_REPOSITORIES: ${{ steps.get-known-repositories.outputs.known_repositories }}
          SUB_APP: ${{ steps.get-parameters.outputs.sub_app }}
          CUSTOMER: ${{ steps.get-parameters.outputs.customer }}
          IMAGE_TAG1: ${{steps.get-parameters.outputs.image_tag1 }}
          IMAGE_TAG2: ${{steps.get-parameters.outputs.image_tag2 }}
      - name: create/get release branch
        run: |
          echo "create/get release branch"
          if git rev-parse --verify --quiet origin/$BRANCH_NAME; then
            echo "branch exists!"
            git checkout $BRANCH_NAME 
          else
            echo "create branch"
            git checkout -b $BRANCH_NAME
          fi
        env:
          BRANCH_NAME: ${{ steps.check-repository.outputs.new_branch_name }}          
      - name: prepare release
        uses: ./tmp/github-workflows/.github/actions/release-product-changes
        with:
          known_repositories: ${{ steps.get-known-repositories.outputs.known_repositories }}
          repository_version: ${{ steps.check-repository.outputs.release_version }}
          generator_version: ${{ steps.check-repository.outputs.generator_version }
          ga_version:  ${{ env.GA_VERSION }}
          prepare_release: true
      - name: delete tmp files
        run: |
          rm -rf ./tmp          
      - name: setup git config
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "<>"
        env:
          GITHUB_ACTOR: ${{ github.actor }}          
      - name: push branch
        run: |
          echo "push branch"
          git commit -am "[skip ci]Prepare release v$RELEASE_VERSION"
          git push origin $BRANCH_NAME
        env:
          RELEASE_VERSION: ${{ steps.check-repository.outputs.release_version }}
          BRANCH_NAME: ${{ steps.check-repository.outputs.new_branch_name }}
      - name: trigger build
        uses: datavisyn/github-action-trigger-workflow@v1
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
          workflow_file_name: "build.yml"
          ref: "${{ steps.check-repository.outputs.new_branch_name }}"
          github_user: ${{ env.GITHUB_USER }}
      - name: create pull request
        id: create-pr
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/pulls
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          title: "Release v${{ steps.check-repository.outputs.release_version }}"
          body: 'This pr will create version v${{ steps.check-repository.outputs.release_version }}'
          head: "${{ steps.check-repository.outputs.new_branch_name }}"
          base: "${{ steps.check-repository.outputs.main_branch_name }}"
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check pr status
        if: ${{ steps.create-pr.outputs.status != 201 }}
        run: |
          echo "something went wrong with the pr"
          echo "data: $DATA"
          echo "status: $STATUS"
          exit 1
        env:
          STATUS: ${{ steps.create-pr.outputs.status }}
          DATA: ${{ steps.create-pr.outputs.data }}
      - name: add labels to pull request
        if: ${{ steps.get-parameters.outputs.labels != '' }}
        id: add-labels
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/issues/{issue_number}/labels
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          issue_number: ${{ fromJson(steps.create-pr.outputs.data).number }}
          labels: "[${{ steps.get-parameters.outputs.labels }}]"
        env:
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check add labels status
        if: ${{ steps.get-parameters.outputs.labels != '' && steps.add-labels.outputs.status != 200 }}
        run: |
          echo "something went wrong with adding the labels"
          echo "data: $DATA"
          echo "status: $STATUS"
          exit 1
        env:
          STATUS: ${{ steps.add-labels.outputs.status }}
          DATA: ${{ steps.add-labels.outputs.data }}
  ###############################################################################################################
  ## CREATE RELEASE: after PR is merged
  ###############################################################################################################                                                       
  create-release:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.head_ref, 'rc_') }}
    runs-on: ubuntu-20.04
    steps:
      - name: check actor
        run: |
          dv_devops=$DV_DEVOPS
          actor=$GITHUB_ACTOR
          array=($(echo "${dv_devops}" | tr ',' "\n"))
          for e in "${array[@]}"; do 
            if [[ "$e" == "$actor" ]] ; then
              exit 0
            fi
          done
          echo "you are not allowed to run this job!"
          exit 1
        env: 
          DV_DEVOPS: ${{ secrets.DV_DEVOPS }}
          GITHUB_ACTOR: ${{ github.actor }}
      - name: check branch
        if: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/heads/main') }}
        run: |
          echo 'only the main branches can be released.'
          exit 1  
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: get release version
        id: get-release-version
        run: |
          release_version=$(jq -r '.version' ./package.json)
          main_branch_name=$BRANCH_NAME
          main_branch_name=${branch_name##*/}
          develop_branch_name=${branch_name/main/develop}
          echo "release_version=$release_version"
          echo "main_branch_name=$main_branch_name"
          echo "develop_branch_name=$develop_branch_name"
          echo "::set-output name=release_version::$release_version"
          echo "::set-output name=main_branch_name::$main_branch_name"
          echo "::set-output name=develop_branch_name::$develop_branch_name"
        env:
          BRANCH_NAME: github.ref  
      - name: delete release branch
        run: |
          git fetch
          git status
          if git rev-parse --verify --quiet origin/$GITHUB_REF; then
            echo "delete release branch: $GITHUB_REF"
            git branch -D $GITHUB_REF
            git push origin --delete $GITHUB_REF
            git status
          fi
        env:
          GITHUB_REF: ${{ github.head_ref }}
      - name: create release
        id: create-release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          tag_name: "v${{ steps.get-release-version.outputs.release_version }}"
          target_commitish: ${{ github.href }}
          name: "v${{ steps.get-release-version.outputs.release_version }}"
          body: "release of v${{ steps.get-release-version.outputs.release_version }}"
          draft: false 
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: check release status
        if: ${{ steps.create-release.outputs.status != 201 }}
        run: |
          echo "something went wrong with the creation of the release"
          echo "data: $DATA"
          echo "status: $STATUS"       
          exit 1                   
        env:
          STATUS: ${{ steps.create-release.outputs.status }}
          DATA: ${{ steps.create-release.outputs.data }} 
      - name: git fetch
        run: |
          git status
          echo "git fetch"
          git fetch
          git checkout $MAIN_BRANCH
          git pull --rebase
          git checkout $DEVELOP_BRANCH
          git pull --rebase
          git status
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
          MAIN_BRANCH:  ${{ steps.get-release-version.outputs.main_branch_name }}
      - name: merge $MAIN_BRANCH to $DEVELOP_BRANCH
        run: |
          echo "merge main to $DEVELOP_BRANCH"
          git merge -X theirs $MAIN_BRANCH --allow-unrelated-histories
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
          MAIN_BRANCH:  ${{ steps.get-release-version.outputs.main_branch_name }}          
      # checkout this workflow repository to get actions    
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: main
          path: ./tmp/github-workflows
      - name: prepare develop
        uses: ./tmp/github-workflows/.github/actions/release-product-changes
        with:
          known_repositories: ${{ steps.get-known-repositories.outputs.known_repositories }}
          repository_version: ${{ steps.get-release-version.outputs.release_version }}"-SNAPSHOT"
          ga_version:  main
          prepare_release: false          
      - name: delete tmp files
        run: |
          rm -rf ./tmp/github-workflows          
      - name: push develop
        run: |
          echo "push develop"
          git add .
          git commit --allow-empty -am "Prepare next development"
          git push origin $DEVELOP_BRANCH
        env:
          DEVELOP_BRANCH: ${{ steps.get-release-version.outputs.develop_branch_name }}
