name: deploy-product

on:
  workflow_call:
    secrets:
      DATAVISYN_BOT_REPO_TOKEN:
        required: true
      DV_BOT_USER:
        required: false

    inputs:
      stage:
        description: "stage that should be deployed (develop|qa|production|insight)"
        required: true
        type: string
      customer:
        description: "customer for that the app should be deployed"
        required: true
        type: string
      add_revision_as_tag:
        description: "add revision label as tag"
        required: false
        type: boolean
        default: false
    outputs:
      revision_label:
        description: "revision that is stored as a label"
        value: ${{ jobs.deploy.outputs.revision_label }}


permissions:
  id-token: write
  contents: read

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GA_VERSION: "main"
  WORKFLOW_BRANCH: "debug_mode"

jobs:
  deploy:
    runs-on: ubuntu-22.04
    outputs:
      revision_label: ${{ steps.get-revision-label.outputs.revision_label }}
    steps:
      # checkout repo to get package.json
      - uses: actions/checkout@v4
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v4
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/check-actor
        with:
          dv_devops: ${{ vars.DV_DEVOPS }}
          dv_qms: ${{ vars.DV_QMS }}
          actor: ${{ github.actor }}
          qms_are_allowed: "true"
      - uses: ./tmp/github-workflows/.github/actions/get-product-parameters
        id: get-parameters
        with:
          branch_name: ${{ github.ref_name }}
          time_zone: ${{ env.TIME_ZONE }}
      - name: trigger deployment
        id: trigger-deployment
        uses: datavisyn/github-action-trigger-workflow@v1
        with:
          owner: "datavisyn"
          repo:  "infrastructure-k8s"
          github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
          workflow_file_name: "deploy-app.yml"
          ref: ${{ env.WORKFLOW_BRANCH }}
          github_user: ${{ secrets.DV_BOT_USER }}
          client_payload: '{ "app": "${{ steps.get-parameters.outputs.app }}", "customer": "${{ inputs.customer }}", "stage": "${{ inputs.stage }}", "sub_app": "${{ steps.get-parameters.outputs.sub_app }}", "branch": "${{ steps.get-parameters.outputs.image_tag2 }}", "add_revision_as_tag": "${{ inputs.add_revision_as_tag }}" }'
      - name: Configure AWS Credentials
        if: ${{ inputs.add_revision_as_tag == true }}
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.DV_AWS_ECR_ROLE }}
          aws_role: ${{ vars.DV_AWS_ECR_ROLE }}
          aws-region: ${{ vars.DV_AWS_REGION }}
      - name: Login to Amazon ECR
        if: ${{ inputs.add_revision_as_tag == true }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      - name: get revision label
        id: get-revision-label
        if: ${{ inputs.add_revision_as_tag == true }}
        run: |
          echo "fetch labels of image"
          ECR_REPO=$(echo ${{ steps.get-parameters.outputs.ecr_repos }} | cut -d ',' -f 1)
          echo "ECR_REPO: $ECR_REPO"
          MANIFEST=$(aws ecr batch-get-image --repository-name "$ECR_REPO" --image-id imageTag="${{ steps.get-parameters.outputs.image_tag2 }}" --accepted-media-types "application/vnd.docker.distribution.manifest.v1+json" --output json |jq -r '.images[].imageManifest' |jq -r '.history[0].v1Compatibility' |jq -r '.config.Labels | to_entries | .[] | select(.key=="org.opencontainers.image.revision") | .value')
          echo "$MANIFEST"
          echo "revision_label=$MANIFEST" >> "$GITHUB_OUTPUT"
