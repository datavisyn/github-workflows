name: release-source

on:
  workflow_call:
    inputs:
      is_helm_chart:
        description: "Specify if this is a Helm Chart repository"
        required: false
        type: boolean
        default: false
      release_version:
        type: string
        description: "The version to release"
        required: true
      skip_branch_check:
        description: "Skip the branch check"
        required: false
        type: boolean
        default: false
      base_branch:
        description: "The base branch to use"
        required: false
        type: string
        default: main

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: "${{ github.workflow }}-${{ github.ref || github.head_ref }}"
  cancel-in-progress: true

env:
  GITHUB_USER: "datavisyn-bot"
  WORKFLOW_BRANCH: "main"
  GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
  CHARTMUSEUM_USER: ${{ secrets.DV_CHARTMUSEUM_USER }}
  CHARTMUSEUM_PASSWORD: ${{ secrets.DV_CHARTMUSEUM_PASSWORD }}

jobs:
  release-repository:
    runs-on: ubuntu-22.04
    steps:
      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.release_version }}" ]; then
            echo "release_version input is empty"
            exit 1
          fi
      - name: Check branch
        if: ${{ inputs.skip_branch_check == false && github.ref_name != 'develop' }}
        run: |
          echo 'Branch check is enabled: only the develop branch can be released.'
          exit 1
      - name: Ensure base branch is main when skip_branch_check is false
        if: ${{ inputs.skip_branch_check == false }}
        run: |
          if [ "${{ inputs.base_branch }}" != "main" ]; then
            echo "Error: base_branch must be 'main' when skip_branch_check is false."
            exit 1
          fi
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.CHECKOUT_TOKEN || github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
      - name: Checkout github-workflows repository
        uses: actions/checkout@v5
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - name: Check actor
        uses: ./tmp/github-workflows/.github/actions/check-actor
        with:
          dv_devops: ${{ vars.DV_DEVOPS }}
          allowed_users: ${{ vars.DV_CAN_RELEASE }}
          actor: ${{ github.actor }}
          qms_are_allowed: "false"

      - name: Check for package.json
        id: check-package-json
        run: |
          if [ -f "package.json" ]; then
            echo "has_package_json=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_package_json=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for pyproject.toml
        id: check-pyproject-toml
        run: |
          # Check if pyproject.toml exists and contains a version field
          if [ -f "pyproject.toml" ] && grep -q "^version\s*=" "pyproject.toml"; then
            echo "has_pyproject_toml=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_pyproject_toml=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Get release version from input
        id: get-release-version-from-input
        run: |
          input_release_version="${{ inputs.release_version }}"
          if echo "$input_release_version" | grep -q '^[0-9.]*$'; then
            echo "Valid input"
          else
            echo "Error: invalid input version."
            exit 1
          fi

          # Extract major, minor, and patch versions of the input version
          input_major=$(echo "$input_release_version" | cut -d'.' -f1)
          input_minor=$(echo "$input_release_version" | cut -d'.' -f2)
          input_patch=$(echo "$input_release_version" | cut -d'.' -f3)

          # Utility function to validate versioning rules
          validate_version() {
            input_major=$1
            input_minor=$2
            input_patch=$3
            file_major=$4
            file_minor=$5
            file_patch=$6

            if [ "$input_major" -eq "$file_major" ]; then
              if [ "$input_minor" -eq "$file_minor" ]; then
                if [ "$input_patch" -eq "$file_patch" ]; then
                  echo "Valid patch version input"
                else
                  echo "Error: Patch version must match the file version without the -SNAPSHOT or .dev0 suffix."
                  exit 1
                fi
              elif [ "$input_minor" -gt "$file_minor" ] && [ "$input_patch" -eq 0 ]; then
                echo "Valid minor version input"
              else
                echo "Error: Minor version is invalid."
                exit 1
              fi
            elif [ "$input_major" -gt "$file_major" ] && [ "$input_minor" -eq 0 ] && [ "$input_patch" -eq 0 ]; then
              echo "Valid major version input"
            else
              echo "Error: Version input is invalid based on semantic versioning rules."
              exit 1
            fi
          }

          # Call the function for package.json (if needed)
          if [ "${{ steps.check-package-json.outputs.has_package_json }}" == "true" ]; then
            file_release_version="$(jq -r '.version' package.json | cut -d '-' -f 1)"
            file_release_version=${file_release_version//-SNAPSHOT/}
            echo "file_release_version=$file_release_version"
            file_major=$(echo "$file_release_version" | cut -d'.' -f1)
            file_minor=$(echo "$file_release_version" | cut -d'.' -f2)
            file_patch=$(echo "$file_release_version" | cut -d'.' -f3)

            echo "Validating package.json version: $file_major.$file_minor.$file_patch"

            validate_version "$input_major" "$input_minor" "$input_patch" "$file_major" "$file_minor" "$file_patch"
          fi

          # Call the function for pyproject.toml (if needed)
          if [ "${{ steps.check-pyproject-toml.outputs.has_pyproject_toml }}" == "true" ]; then
            file_release_version="$(grep -oP 'version\s*=\s*[\"\x27]\K[^\"\x27]+' pyproject.toml | cut -d '-' -f 1)"
            file_release_version=${file_release_version//.dev0/}
            echo "file_release_version=$file_release_version"
            file_major=$(echo "$file_release_version" | cut -d'.' -f1)
            file_minor=$(echo "$file_release_version" | cut -d'.' -f2)
            file_patch=$(echo "$file_release_version" | cut -d'.' -f3)

            echo "Validating pyproject.toml version: $file_major.$file_minor.$file_patch"

            validate_version "$input_major" "$input_minor" "$input_patch" "$file_major" "$file_minor" "$file_patch"
          fi

          echo "New version is $input_major.$input_minor.$input_patch"
          echo "RELEASE_VERSION=$input_release_version" >> "$GITHUB_ENV"

      - name: Create release branch
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "<>"
          git checkout -b release-"$RELEASE_VERSION"
      - name: Update package.json
        if: ${{ steps.check-package-json.outputs.has_package_json == 'true' }}
        run: |
          sed -i "s/^\(\s*\)\"version\".*/\1\"version\": \"$RELEASE_VERSION\",/" package.json
          git add package.json
      - name: Update pyproject.toml
        if: ${{ steps.check-pyproject-toml.outputs.has_pyproject_toml == 'true' }}
        run: |
          sed -i "s/^version = \".*\"/version = \"$RELEASE_VERSION\"/" pyproject.toml
          git add pyproject.toml
      - name: Add Helm repository
        if: ${{ inputs.is_helm_chart == true }}
        run: |
          helm repo add datavisyn https://chartmuseum.app.datavisyn.io --username ${{ env.CHARTMUSEUM_USER }} --password ${{ env.CHARTMUSEUM_PASSWORD }}
          # required for visynKB as it depends on them.
          # TODO: make this an input of the workflow.
          helm repo add apache-airflow https://airflow.apache.org
          helm repo add bitnami https://charts.bitnami.com/bitnami
      - name: Change charts and subcharts version
        if: ${{ inputs.is_helm_chart == true }}
        run: |
          cd deploy/helm
          ls_result="$(ls)"

          # update the version and appVersion fields in all Chart.yaml files
          for dir in $ls_result; do
            echo "Processing directory: $dir"
            if [ -f "$dir/Chart.yaml" ]; then
              # Update the version and appVersion fields in the Chart.yaml
              sed -i "s/^version:.*/version: $RELEASE_VERSION/" "$dir/Chart.yaml"
              sed -i "s/^appVersion:.*/appVersion: \"$RELEASE_VERSION\"/" "$dir/Chart.yaml"
            else
              continue
            fi
          done

          # update the dependencies versions based on the charts available in deploy/helm
          for dir in $ls_result; do
            if [ -f "$dir/Chart.yaml" ]; then
              for dep_dir in $ls_result; do
                if grep -q "name: $dep_dir" "$dir/Chart.yaml"; then
                  sed -i "/name: $dep_dir/!b;n;s/version:.*/version: $RELEASE_VERSION/" "$dir/Chart.yaml"
                fi
              done
            fi
          done

          git add .
      - name: Update imageTag and repository_tag in values files
        if: ${{ inputs.is_helm_chart == true }}
        run: |
          cd deploy/helm
          ls_result="$(ls)"
          for dir in $ls_result; do \
            echo "Processing $dir"; \
            if [ -e "$dir/values.yaml" ]; then \
                if grep -q "imageTag" "$dir/values.yaml"; then \
                    sed -i "s/^imageTag.*/imageTag: \&imageTag \"v$RELEASE_VERSION\"/" "$dir"/values.yaml; \
                fi; \
                if grep -q "repository_tag" "$dir/values.yaml"; then \
                  sed -i "s/.*repository_tag.*/        repository_tag: v$RELEASE_VERSION/" "$dir"/values.yaml; \
                fi; \
            fi; \
            if [ -e "$dir/values/values.yaml" ]; then
                if grep -q "imageTag" "$dir/values/values.yaml"; then \
                  sed -i "s/^imageTag.*/imageTag: \&imageTag \"v$RELEASE_VERSION\"/" "$dir"/values/values.yaml; \
                fi; \
                if grep -q "repository_tag" "$dir/values/values.yaml"; then \
                  sed -i "s/.*repository_tag.*/        repository_tag: v$RELEASE_VERSION/" "$dir"/values/values.yaml; \
                fi; \
            fi; \
            # skip helm dep update and helm dep build for directories with 'starter' in the name
            if [[ "$dir" != *"starter"* ]]; then
              helm dep build "$dir"
              helm dep update "$dir"
            fi
          done  
          git add .
        env:
          CHARTMUSEUM_PASSWORD: ${{ secrets.DV_CHARTMUSEUM_PASSWORD }}
      - name: update readme files
        if: ${{ inputs.is_helm_chart == true }}
        run: |
          # install homebrew package manager
          yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          (echo; echo "eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"") >> /home/runner/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          sudo apt-get install build-essential
          # install helm-docs
          brew install norwoodj/tap/helm-docs
          # update readme files
          cd deploy/helm
          helm-docs --document-dependency-values 
          git add .
      - name: Commit changes
        run: |
          git commit --allow-empty -m "Prepare release version $RELEASE_VERSION"
      - name: push all changes
        run: |
          git push origin release-"$RELEASE_VERSION"

      - name: Generate release notes
        id: generate-release-notes
        run: |
          TAG_NAME="v${{ inputs.release_version }}"
          response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/generate-notes \
            -d "$(jq -n --arg tag_name "$TAG_NAME" \
                  --arg target_commitish "${{ github.ref_name }}" \
                  '{tag_name: $tag_name, target_commitish: $target_commitish}')")

          RELEASE_NOTES=$(echo "$response" | jq -r '.body')

          echo "$RELEASE_NOTES" > release_notes.txt

      - name: Create pr
        run: |
          PR_NOTES=$(cat release_notes.txt)
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls \
            -d "$(jq -n \
                  --arg title "Release ${{ env.RELEASE_VERSION }}" \
                  --arg body "$PR_NOTES" \
                  --arg head "release-${{ env.RELEASE_VERSION }}" \
                  --arg base "${{ inputs.base_branch }}" \
                  '{title: $title, body: $body, head: $head, base: $base}')"
