name: release-source

on:
  workflow_call:
    

permissions:
  contents: write

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GA_VERSION: "main"
  GITHUB_USER: "datavisyn-bot"
  WORKFLOW_BRANCH: "main"
  GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}

jobs:
  release-repository:
    runs-on: ubuntu-22.04
    steps:
      - name: check branch
        if: ${{ github.ref_name != 'develop' }}
        run: |
          echo 'only the develop branch can be released.'
          exit 1
      # checkout specific repository
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
      # checkout this workflow repository to get actions
      - name: checkout github-workflows repository
        uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - name: check actor
        uses: ./tmp/github-workflows/.github/actions/check-actor
        with:
          dv_devops: ${{ vars.DV_DEVOPS }}
          actor: ${{ github.actor }}
          qms_are_allowed: "false"
      - name: get release version from package.json
        id: get-release-version
        if: ${{ github.event.inputs.release_version == null }}
        run: |
          release_version="$(jq -r '.version' package.json | cut -d '-' -f 1)"
          echo "RELEASE_VERSION=$release_version" >> "$GITHUB_ENV"
      - name: get release version from input
        id: get-release-version-from-input
        if: ${{ github.event.inputs.release_version != null }}
        run: |
          input_release_version="${{ github.event.inputs.release_version }}"
          if echo "$input_release_version" | grep -q '^[0-9.]*$'; then
            echo "Valid input"
          else
            echo "Error: invalid input version."
            exit 1
          fi

          file_release_version="$(jq -r '.version' package.json | cut -d '-' -f 1)"
          file_release_version="${file_release_version//[^0-9.]}"
          echo "file_release_version=$file_release_version"
          file_major=$(echo "$file_release_version" | cut -d'.' -f1)
          file_minor=$(echo "$file_release_version" | cut -d'.' -f2)
          file_patch=$(echo "$file_release_version" | cut -d'.' -f3)


          input_major=$(echo "$input_release_version" | cut -d'.' -f1)
          input_minor=$(echo "$input_release_version" | cut -d'.' -f2)
          input_patch=$(echo "$input_release_version" | cut -d'.' -f3)

          max_major=$(("$file_major" + 1))  
          max_minor=$(("$file_minor" + 1))
          max_patch=$(("$file_patch" + 1))

          echo "max versions: $max_major.$max_minor.$max_patch"


          if [ "$input_major" -gt "$max_major" ]; then
            echo "Error: Major version cannot be greater than the current version by more than 1."
            exit 1
          elif [ "$input_minor" -gt "$max_minor" ]; then
            echo "Error: Minor version cannot be greater than the current version by more than 1."
            exit 1
          elif [ "$input_patch" -gt "$max_patch" ]; then
            echo "Error: Patch version cannot be greater than the current version by more than 1."
            exit 1
          elif [ "$input_major" -lt "$file_major" ]; then
            echo "Error: Major version cannot be less than the current version."
            exit 1
          elif [ "$input_minor" -lt "$file_minor" ]; then
            if [ "$input_major" -eq "$max_major" ] && [ "$input_minor" -eq 0 ] && [ "$input_patch" -eq 0 ]; then
              echo "Valid version input"
            else
              echo "Error: Minor version cannot be less than the current version."
              exit 1
            fi
          elif [ "$input_patch" -lt "$file_patch" ]; then
            if [ "$input_major" -eq "$max_major" ] && [ "$input_minor" -eq 0 ] && [ "$input_patch" -eq 0 ]; then
              echo "Valid version input"
            elif [ "$input_major" -eq "$file_major" ] && [ "$input_minor" -eq "$max_minor" ] && [ "$input_patch" -eq 0 ]; then
              echo "Valid version input"
            else
              echo "Error: Patch version cannot be less than the current version."
              exit 1
            fi
          fi
          echo "New version is $input_major.$input_minor.$input_patch"
          echo "RELEASE_VERSION=$input_release_version" >> "$GITHUB_ENV"
          
      - name: create release branch
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "<>"
          git checkout -b release-"$RELEASE_VERSION"
          git push origin release-"$RELEASE_VERSION"
      - name: Update package.json
        run: |
          sed -i "s/.*version.*/    \"version\": \"$RELEASE_VERSION\",/" package.json
          git add package.json
          git commit -m "Update package.json version to $RELEASE_VERSION"
          git push origin release-"$RELEASE_VERSION"
      - name: change charts and subcharts version
        if: ${{ github.repository  == 'datavisyn/reprovisyn' ||  github.repository == 'datavisyn/aelixir' || github.repository == 'datavisyn/test-app' }}
        run: |
          cd deploy/helm
          ls_result="$(ls)"
          # update chart version
          for dir in $ls_result; do \
           sed -i "s/^version.*/version: $RELEASE_VERSION/" "$dir"/Chart.yaml;\
           sed -i "s/^appVersion.*/appVersion: \"$RELEASE_VERSION\"/" "$dir"/Chart.yaml;\
          done
          # update subchart version
          for folder in ./*; do \
            if [ -d "$folder/subcharts" ]; then \
                sed -i "s/^version.*/version: $RELEASE_VERSION/" "$folder"/subcharts/*/Chart.yaml; \
                sed -i "s/^appVersion.*/appVersion: \"$RELEASE_VERSION\"/" "$folder"/subcharts/*/Chart.yaml; \
            fi; \
          done
          # commit and push changes
          git add .
          git commit -m "Update chart version to $RELEASE_VERSION"
          git push origin release-"$RELEASE_VERSION"
      - name: update imageTag and repository_tag in values files
        if: ${{ github.repository  == 'datavisyn/reprovisyn' ||  github.repository == 'datavisyn/aelixir' || github.repository == 'datavisyn/test-app' }}
        run: |
          cd deploy/helm
          ls_result="$(ls)"
          for dir in $ls_result; do \
            echo "Processing $dir"; \
            if [ -e "$dir/values.yaml" ]; then \
                if grep -q "imageTag" "$dir/values.yaml"; then \
                    sed -i "s/^imageTag.*/imageTag: \&imageTag \"v$RELEASE_VERSION\"/" "$dir"/values.yaml; \
                fi; \
                if grep -q "repository_tag" "$dir/values.yaml"; then \
                  sed -i "s/.*repository_tag.*/        repository_tag: v$RELEASE_VERSION/" "$dir"/values.yaml; \
                fi; \
            fi; \
            if [ -e "$dir/values/values.yaml" ]; then
                if grep -q "imageTag" "$dir/values/values.yaml"; then \
                  sed -i "s/^imageTag.*/imageTag: \&imageTag \"v$RELEASE_VERSION\"/" "$dir"/values/values.yaml; \
                fi; \
                if grep -q "repository_tag" "$dir/values/values.yaml"; then \
                  sed -i "s/.*repository_tag.*/        repository_tag: v$RELEASE_VERSION/" "$dir"/values/values.yaml; \
                fi; \
            fi; \
          done  
          # commit and push changes
          git add .
          git commit -m "Update imageTag & repository_tag if exists in values files to v$RELEASE_VERSION"
          git push origin release-"$RELEASE_VERSION"
      - name: update readme files
        if: ${{ github.repository  == 'datavisyn/reprovisyn' ||  github.repository  == 'datavisyn/aelixir' || github.repository == 'datavisyn/test-app' }}
        run: |
          # install homebrew package manager
          yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          (echo; echo "eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"") >> /home/runner/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          sudo apt-get install build-essential
          # install helm-docs
          brew install norwoodj/tap/helm-docs
          # update readme files
          cd deploy/helm
          helm dep update
          helm dep build
          helm-docs --document-dependency-values 
          # commit and push changes
          git add .
          git commit -m "Update Helm documentation"
          git push origin release-"$RELEASE_VERSION"
      - name: create pr
        id: create-pr
        run: |
          # create a pull request
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.GITHUB_TOKEN}}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls \
            -d '{"title":"Release ${{ env.RELEASE_VERSION }}","body":"release ${{ env.RELEASE_VERSION }}","head":"release-${{ env.RELEASE_VERSION }}","base":"main","draft":false}'
      


      
 
        

            