name: Build Frontend and Backend Product

on:
  workflow_call:

permissions:
  contents: read

jobs:
  build-frontend:
    permissions:
      id-token: write
      contents: read  
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        node-version: ["14.19"]
    steps:      
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: Set up node version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Show node and npm version
        run: |
          node -v
          npm -v
      - name: Git config
        if: "${{ env.GITHUB_TOKEN != '' }}"
        run: git config --global url.https://${{ env.GITHUB_TOKEN }}@github.com/.insteadOf ssh://git@github.com/
        env: 
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}       
      - name: Install npm dependencies
        run:  npm install
      - name: Show installed npm dependencies
        run: npm list --depth=1 || true


build-node:
    permissions:
      id-token: write
      contents: read  
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        node-version: ["14.19"]
    steps:      
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      - name: Set up node version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Show node and npm version
        run: |
          node -v
          npm -v
      - name: Git config
        if: "${{ env.GITHUB_TOKEN != '' }}"
        run: git config --global url.https://${{ env.GITHUB_TOKEN }}@github.com/.insteadOf ssh://git@github.com/
        env: 
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}       
      - name: Install generator
        run:  
          npm install -g yo
          npm install -g generator-phovea@v11.0.0
      - name: create workspace node
        run: mkdir -p tmp/node        
      - name: clone components for workspace
        run: |
          cd tmp/node
          name=$(jq  -rc '.[] | select(.type == "api") | .repo' ./phovea_product.json)
          name=$(echo "$name" | sed -e 's|.*/||')
          repository=https://github.com/$(jq  -rc '.[] | select(.type == "api") | .repo' ./phovea_product.json).git
          branch=$(jq  -rc '.[] | select(.type == "api") | .branch' ./phovea_product.json)
          git clone -b $branch --depth 1 $repository $name
          readarray -t my_array < <(jq  -rc '.[] | select(.type == "api") | .additional[]' ./phovea_product.json)
          for additional in "${my_array[@]}"; do
            echo "$additional"
            name=$(echo $additional | jq  -rc '.name')
            name=$(echo "$name" | sed -e 's|.*/||')
            echo "$name"
            repository=https://github.com/$(echo $additional | jq  -rc '.repo').git
            branch=$(echo $additional | jq  -rc '.branch')
            echo "$repository"
            echo "$branch"
            git clone -b $branch --depth 1 $repository $name
          done
      - name: create workspace
        run: |
          echo "create workspace"
          rm ./../../.yo-rc.json
          yo phovea:workspace --defaultApp=patentbay --noAdditionals=true  --addWorkspaceRepos=false
          yes | cp -r ./../../templates/web/* .
      - name: install dependencies
        run: npm i     
      - name: show installed dependencies
        run: npm list --depth=1 || true
      - name: Build
        run: npm run dist
      - name: Move dist to build
        run: mv ./dist/bundles.tar.gz ../build/nodes.tar.gz
      - name: Get image tag
        id: get-image-tag
        run: |
          if [[ ${{ github.ref_name }} == *"main"* ]] ; then
            tag1=$(jq -r '.version' ./package.json)
          else
            tag1=${{ github.ref_name }}
          fi
          tag2=$tag1-$(date +%Y%m%d-%H%M%S)
          echo ::set-output name=tag1::${tag1}
          echo ::set-output name=tag2::${tag2}
      - name: Get repository name
        id: get-repository
        run: |
          if [[ $ECR_REPOSITORY != null ]] ; then
            repository=$ECR_REPOSITORY
          else
            repository=${{ github.event.repository.name }}
            repository=${repository%_product}
          fi
          echo ::set-output name=repository::${repository}
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}           
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.get-repository.outputs.repository }}
          IMAGE_TAG1: ${{ steps.get-image-tag.outputs.tag1 }}
          IMAGE_TAG2: ${{ steps.get-image-tag.outputs.tag2 }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY

          
          