name: Build Frontend and Backend Images for Product

on: workflow_call

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GENERATOR_VERSION: "v11.0.0"
  TIME_ZONE: "Europe/Vienna"

permissions:
  id-token: write
  contents: read 

jobs:
  prepare-build:
    outputs:
      app: ${{ steps.get-parameters.outputs.app }}  
      api_repo: ${{ steps.get-parameters.outputs.api_repo }}  
      web_repo: ${{ steps.get-parameters.outputs.web_repo }}
      stage: ${{ steps.get-parameters.outputs.stage }}
      customer: ${{ steps.get-parameters.outputs.customer }}
      sub_app: ${{ steps.get-parameters.outputs.sub_app }}
      aws: ${{ steps.get-parameters.outputs.aws }}
      image_tag1: ${{ steps.get-parameters.outputs.image_tag1 }}
      image_tag2: ${{ steps.get-parameters.outputs.image_tag2 }}
    runs-on: ubuntu-20.04
    steps: 
      # checkout specific repository    
      - uses: actions/checkout@v3
      - name: get parameters
        id: get-parameters
        run: |
          product_name=${{ github.event.repository.name }}
          post_fix=_product
          product_name=${product_name%$post_fix}
          app=$(jq  -rc '.[] | select(.type == "web") | .name' ./phovea_product.json)
          api_repo="$product_name/"$(jq  -rc '.[] | select(.type == "api") | .label' ./phovea_product.json)
          web_repo="$product_name/"$(jq  -rc '.[] | select(.type == "web") | .label' ./phovea_product.json)
          # get everything from branch name
          # branchname should look <develop|master|main>_<sub_app>_<customer>_<aws>
          # for release candidates the branch name should look like: rc_<version>_<sub_app>_<customer>_<aws>
          branch_name=${{ github.ref }}
          branch_name=${branch_name##*/}
          echo $branch_name
          post_fix=_aws
          aws=false
          if [[ $branch_name == *"_aws"* ]]; then
            aws=true
            branch_name=${branch_name%$post_fix}
          fi
          # develop branch
          if [[ $branch_name == develop* ]] ; then 
            stage=develop
            branch_name=${branch_name#develop_}
            branch_name=${branch_name#develop}
          fi
          # master / main branch
          if [[ $branch_name == master* ]] || [[ $a == main* ]] ; then 
            stage=production
            branch_name=${branch_name#main_}
            branch_name=${branch_name#main}
            branch_name=${branch_name#master_}
            branch_name=${branch_name#master}
          fi
          # release candidate
          if [[ $branch_name == rc_* ]] ; then 
            stage=production
            branch_name=${branch_name#rc_}
            rc_candidate=rc_${branch_name%%_*}
            branch_name=${branch_name#*_}
          fi
          # version tag
          if [[ $branch_name == v* ]] ; then 
            stage=production
            branch_name=${branch_name#v}
            version=${branch_name%%_*}
            branch_name=${branch_name#*_}
          fi          
          # check customer
          customer=datavisyn
          dv_customers=${{ secrets.DV_CUSTOMERS }}
          array=($(echo "${dv_customers}" | tr ',' "\n"))
          for customer in "${array[@]}"
          do
            if [[ ${{ github.ref }} =~ _${customer}_ ]]; then
              branch_name=${branch_name//$customer/}
            fi
          done
          # check if there is a sub_app part
          sub_app=$(echo $branch_name | sed s/_//)
          # get image tags
          image_tag1=''
          if [[ $stage == develop ]] ; then
            image_tag1+=develop_
          else
            if [[ ! -z $rc_candidate ]] ; then
              image_tag1+=${rc_candidate}_
            elif [[ ! -z $version ]] ; then
              image_tag1+=${version}_ 
            else
              image_tag1+=main_              
            fi  
          fi
          if [[ ! -z $sub_app ]] ; then
              image_tag1+=${sub_app}_
          fi
          if [[ $customer != "datavisyn" ]] ; then
              image_tag1+=${customer}_
          fi
          image_tag1=${image_tag1::-1}
          image_tag2=$image_tag1-$(TZ=${{ env.TIME_ZONE }} date +%Y%m%d-%H%M%S)
          # echo parameters
          echo "app=$app"
          echo "api_repo=$api_repo"
          echo "web_repo=$web_repo"
          echo "stage=$stage"
          echo "customer=$customer"
          echo "sub_app=$sub_app"
          echo "aws=$aws"
          echo "image_tag1=$image_tag1"
          echo "image_tag2=$image_tag2"
          # echo to output
          echo "::set-output name=app::$app"
          echo "::set-output name=api_repo::$api_repo"
          echo "::set-output name=web_repo::$web_repo"
          echo "::set-output name=stage::$stage"
          echo "::set-output name=customer::$customer"
          echo "::set-output name=sub_app::$sub_app"
          echo "::set-output name=aws::$aws"
          echo "::set-output name=image_tag1::$image_tag1"
          echo "::set-output name=image_tag2::$image_tag2"
  # build-node:
  #   needs: prepare-build 
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: ["14.19"]
  #   steps: 
  #     # checkout specific repository    
  #     - uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
  #     - name: Set up node version ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         registry-url: ${{ env.NPM_REGISTRY }}
  #     - name: Show node and npm version
  #       run: |
  #         node -v
  #         npm -v
  #     - name: Git config
  #       if: "${{ env.GITHUB_TOKEN != '' }}"
  #       run: |
  #         git config --global url.https://${{ env.GITHUB_TOKEN }}@github.com/.insteadOf ssh://git@github.com/
  #       env: 
  #         GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}       
  #     - name: Install generator
  #       run: |
  #         npm install -g yo@4.3.0
  #         npm install -g generator-phovea@${{ env.GENERATOR_VERSION }}
  #     - name: create workspace
  #       run: |
  #         mkdir -p ./tmp/web
  #         cd ./tmp/web
  #         name=$(jq  -rc '.[] | select(.type == "web") | .repo' ../../phovea_product.json)
  #         name=$(echo "$name" | sed -e 's|.*/||')
  #         repository=https://${{ env.GITHUB_TOKEN }}@github.com/$(jq  -rc '.[] | select(.type == "web") | .repo' ../../phovea_product.json).git
  #         branch=$(jq  -rc '.[] | select(.type == "web") | .branch' ../../phovea_product.json)
  #         git clone -b $branch --depth 1 $repository $name
  #         readarray -t my_array < <(jq  -rc '.[] | select(.type == "web") | .additional[]' ../../phovea_product.json)
  #         for additional in "${my_array[@]}"; do
  #           echo "$additional"
  #           name=$(echo $additional | jq  -rc '.name')
  #           name=$(echo "$name" | sed -e 's|.*/||')
  #           echo "$name"
  #           repository=https://${{ env.GITHUB_TOKEN }}@github.com/$(echo $additional | jq  -rc '.repo').git
  #           branch=$(echo $additional | jq  -rc '.branch')
  #           echo "$repository"
  #           echo "$branch"
  #           git clone -b $branch --depth 1 $repository $name
  #         done
  #       env: 
  #         GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}           
  #     - name: update workspace
  #       run: |
  #         cd ./tmp/web
  #         rm ./../../.yo-rc.json
  #         yo phovea:workspace --defaultApp=${{ needs.prepare-build.outputs.app }} --noAdditionals=true  --addWorkspaceRepos=false
  #         yes | cp -r ./../../templates/web/* .
  #     - name: install dependencies
  #       run: |
  #         cd ./tmp/web
  #         npm i     
  #     - name: show installed dependencies
  #       run: |
  #         cd ./tmp/web
  #         npm list --depth=1 || true
  #     - name: Build
  #       run: |
  #         cd ./tmp/web
  #         npm run dist
  #     - name: Configure AWS Credentials
  #       if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
  #         aws-region: eu-central-1
  #     - name: Login to Amazon ECR
  #       if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}      
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Build, tag, and push image to Amazon ECR
  #       if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}      
  #       env:
  #         ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  #         ECR_REPOSITORY: ${{ needs.prepare-build.outputs.web_repo }}
  #         IMAGE_TAG1: ${{ needs.prepare-build.outputs.image_tag1 }}
  #         IMAGE_TAG2: ${{ needs.prepare-build.outputs.image_tag2 }}
  #       run: |
  #         cd ./tmp/web
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2 -f ./deploy/web/Dockerfile .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2
  #     - name: Log out from Amazon ECR
  #       if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' && always() }}      
  #       run: docker logout ${{ steps.login-ecr.outputs.registry }}
  build-python:
    needs: prepare-build 
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps: 
      # checkout specific repository    
      - uses: actions/checkout@v3
      # need node because of the generator
      - name: Set up node version 
        uses: actions/setup-node@v3
        with:
          node-version: "14.19"
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Show python and pip version
        run: |
          python --version
          pip --version
      - name: Git config
        if: "${{ env.GITHUB_TOKEN != '' }}"
        run: |
          git config --global url.https://${{ env.GITHUB_TOKEN }}@github.com/.insteadOf ssh://git@github.com/
        env: 
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}       
      - name: Install generator
        run: |
          npm install -g yo@4.3.0
          npm install -g generator-phovea@${{ env.GENERATOR_VERSION }}
      - name: create workspace
        run: |
          mkdir -p ./tmp/api
          cd ./tmp/api
          name=$(jq  -rc '.[] | select(.type == "api") | .repo' ../../phovea_product.json)
          name=$(echo "$name" | sed -e 's|.*/||')
          repository=https://${{ env.GITHUB_TOKEN }}@github.com/$(jq  -rc '.[] | select(.type == "api") | .repo' ../../phovea_product.json).git
          branch=$(jq  -rc '.[] | select(.type == "api") | .branch' ../../phovea_product.json)
          git clone -b $branch --depth 1 $repository $name
          readarray -t my_array < <(jq  -rc '.[] | select(.type == "api") | .additional[]' ../../phovea_product.json)
          for additional in "${my_array[@]}"; do
            echo "$additional"
            name=$(echo $additional | jq  -rc '.name')
            name=$(echo "$name" | sed -e 's|.*/||')
            echo "$name"
            repository=https://${{ env.GITHUB_TOKEN }}@github.com/$(echo $additional | jq  -rc '.repo').git
            branch=$(echo $additional | jq  -rc '.branch')
            echo "$repository"
            echo "$branch"
            git clone -b $branch --depth 1 $repository $name
          done
        env: 
          GITHUB_TOKEN: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}           
      - name: update workspace
        run: |
          cd ./tmp/api
          rm ./../../.yo-rc.json
          yo phovea:workspace --defaultApp=${{ needs.prepare-build.outputs.app }} --noAdditionals=true  --addWorkspaceRepos=false
          yes | cp -r ./../../templates/api/* .
      - name: Build
        run: |
          cd ./tmp/api
          mkdir -p ./build/source
          name=$(jq  -rc '.[] | select(.type == "api") | .repo' ../../phovea_product.json)
          name=$(echo "$name" | sed -e 's|.*/||')
          cd $name
          make build
          cp -r ./build/lib/* ../build/source/
          cp -r ./${name,,}.egg-info ../build/source/${name,,}.egg-info
          cd ..
          readarray -t my_array < <(jq  -rc '.[] | select(.type == "api") | .additional[]' ../../phovea_product.json)
          for additional in "${my_array[@]}"; do
            echo "$additional"
            name=$(echo $additional | jq  -rc '.name')
            name=$(echo "$name" | sed -e 's|.*/||')
            echo "$name"
            cd $name
            make build
            cp -r ./build/lib/* ../build/source/
            cp -r ./${name,,}.egg-info ../build/source/${name,,}.egg-info
            cd ..
          done
      - name: Configure AWS Credentials
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}      
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}      
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ needs.prepare-build.outputs.api_repo }}
          IMAGE_TAG1: ${{ needs.prepare-build.outputs.image_tag1 }}
          IMAGE_TAG2: ${{ needs.prepare-build.outputs.image_tag2 }}
        run: |
          cd ./tmp/api
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2 -f ./deploy/api/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2
      - name: Log out from Amazon ECR
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' && always() }}      
        run: docker logout ${{ steps.login-ecr.outputs.registry }}        
  deploy:
    needs: [prepare-build, build-python] 
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare-build.outputs.stage == 'develop' }}
    steps:           
      - name: Deploy
        run: echo "Deploy" 
