name: Build Frontend and Backend Images for Product

on: 
  workflow_call:
    secrets:
      DATAVISYN_BOT_REPO_TOKEN:
        required: false
      DV_CUSTOMERS:
        required: true
      DV_AWS_ECR_ROLE:
        required: false
      DV_AWS_REGION:
        required: false
      DV_AWS_ECR_REGISTRY:
        required: false  
       

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GENERATOR_VERSION: "develop"
  TIME_ZONE: "Europe/Vienna"

permissions:
  id-token: write
  contents: read 

jobs:
  prepare-build:
    outputs:
      app: ${{ steps.get-parameters.outputs.app }}  
      api_repo: ${{ steps.get-parameters.outputs.api_repo }}  
      web_repo: ${{ steps.get-parameters.outputs.web_repo }}
      stage: ${{ steps.get-parameters.outputs.stage }}
      customer: ${{ steps.get-parameters.outputs.customer }}
      sub_app: ${{ steps.get-parameters.outputs.sub_app }}
      aws: ${{ steps.get-parameters.outputs.aws }}
      image_tag1: ${{ steps.get-parameters.outputs.image_tag1 }}
      image_tag2: ${{ steps.get-parameters.outputs.image_tag2 }}
      build_node: ${{ steps.get-parameters.outputs.build_node }}
      build_python: ${{ steps.get-parameters.outputs.build_python }}
    runs-on: ubuntu-20.04
    steps: 
      # checkout specific repository    
      - uses: actions/checkout@v3
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: main
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/get-product-parameters
        id: get-parameters
        with:
          dv_customers: ${{ secrets.DV_CUSTOMERS }}
          repository_name: ${{ github.event.repository.name }}
          branch_name: ${{ github.ref }}
          time_zone: ${{ env.TIME_ZONE }}
  build-node:
    needs: prepare-build 
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare-build.outputs.build_node && needs.prepare-build.outputs.build_node == 'true'}}
    strategy:
      fail-fast: false
      matrix:
        node-version: ["14.19"]
    steps: 
      # checkout specific product repository    
      - uses: actions/checkout@v3
        with:
          token: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
      - name: Set up node version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Show node and npm version
        run: |
          node -v
          npm -v
      - name: Git config
        run: |
          git config --global url.https://$GITHUB_TOKEN@github.com/.insteadOf ssh://git@github.com/
          if [[ ! -z $GITLAB_TOKEN && ! -z $GITLAB_HOST ]] ; then
            echo "set gitlab config"
            git config --global url."https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "ssh://git@$GITLAB_HOST/"
            # git config --global url."https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git@$GITLAB_HOST:"
            # git config --global url."git+https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git+ssh://git@$GITLAB_HOST:"
          fi         
        env: 
          GITHUB_TOKEN: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          GITLAB_TOKEN:  ${{ secrets.GITLAB_TOKEN }}
          GITLAB_HOST:  ${{ secrets.GITLAB_HOST }} 
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: main
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/create-product-workspace
        with:
          phovea_type: web
          generator_version: ${{ env.GENERATOR_VERSION }}
          github_token:  ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          app_name:  ${{ needs.prepare-build.outputs.app }}
          gitlab_token:  ${{ secrets.GITLAB_TOKEN }} 
      - name: install dependencies
        run: |
          cd ./tmp/web
          cat ./package.json
          cat .yo-rc-workspace.json
          npm i     
      - name: show installed dependencies
        run: |
          cd ./tmp/web
          npm list --depth=1 || true
      - name: Build
        run: |
          cd ./tmp/web
          npm run dist
      - uses: ./tmp/github-workflows/.github/actions/build-push-image
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }} 
          aws_region: ${{ secrets.DV_AWS_REGION }} 
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.web_repo }}
          docker_file: ./deploy/web/Dockerfile
          CURRENT_DIRECTORY: ./tmp/web
          image_tag1: ${{ needs.prepare-build.outputs.image_tag1 }}
          image_tag2: ${{ needs.prepare-build.outputs.image_tag2 }}          

  build-python:
    needs: prepare-build 
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare-build.outputs.build_python && needs.prepare-build.outputs.build_python == 'true'}}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps: 
      # checkout specific product repository    
      - uses: actions/checkout@v3
      # need node because of the generator
      - name: Set up node version 
        uses: actions/setup-node@v3
        with:
          node-version: "14.19"
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Show python and pip version
        run: |
          python --version
          pip --version
      - name: Git config
        run: |
          git config --global url.https://$GITHUB_TOKEN@github.com/.insteadOf ssh://git@github.com/
          if [[ ! -z $GITLAB_TOKEN && ! -z $GITLAB_HOST ]] ; then
            echo "set gitlab config"
            git config --global url."https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git@$GITLAB_HOST:"
            git config --global url."git+https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git+ssh://git@$GITLAB_HOST:"
          fi  
        env: 
          GITHUB_TOKEN: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          GITLAB_TOKEN:  ${{ secrets.GITLAB_TOKEN }}
          GITLAB_HOST:  ${{ secrets.GITLAB_HOST }} 
      # needs wheel for make
      - name: install requirements
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: main
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/create-product-workspace
        with:
          phovea_type: api
          generator_version: ${{ env.GENERATOR_VERSION }}
          github_token:  ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          app_name:  ${{ needs.prepare-build.outputs.app }} 
          gitlab_token:  ${{ secrets.GITLAB_TOKEN }}  
      - name: Build
        run: |
          cd ./tmp/api
          mkdir -p ./build/source
          name=$(jq  -rc '.[] | select(.type == "api") | .repo' ../../phovea_product.json)
          name=$(echo "$name" | sed -e 's|.*/||')
          cd $name
          echo $name
          make build
          cp -r ./build/lib/* ../build/source/
          cp -r ./${name,,}.egg-info ../build/source/${name,,}.egg-info
          cd ..
          readarray -t my_array < <(jq  -rc '.[] | select(.type == "api") | .additional[]' ../../phovea_product.json)
          for additional in "${my_array[@]}"; do
            echo "$additional"
            name=$(echo $additional | jq  -rc '.name')
            name=$(echo "$name" | sed -e 's|.*/||')
            echo "$name"
            cd $name
            make build
            cp -r ./build/lib/* ../build/source/
            cp -r ./${name,,}.egg-info ../build/source/${name,,}.egg-info
            cd ..
          done
      - uses: ./tmp/github-workflows/.github/actions/build-push-image
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }} 
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.api_repo }}
          docker_file: ./deploy/api/Dockerfile
          CURRENT_DIRECTORY: ./tmp/api
          image_tag1: ${{ needs.prepare-build.outputs.image_tag1 }}
          image_tag2: ${{ needs.prepare-build.outputs.image_tag2 }}
  deploy:
    needs: [prepare-build, build-node, build-python] 
    runs-on: ubuntu-20.04
    if: ${{ allways() && needs.prepare-build.outputs.stage == 'develop' && needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
    steps:
      - name: fail if conditional job failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1      
      - name: Deploy
        run: echo "Deploy" 
