name: Release Repository

on: 
  workflow_call:
    inputs:
      known_repositories:
        description: "repositories, that are known in the datavisyn eco-system"
        required: true
        type: string
      ga_version:
        description: "github action version to use for main"
        required: true
        type: string        

env: 
  GITHUB_USER: "datavisyn-bot"


jobs:
  release-repository:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Wrong actor
        if: ${{ github.actor != 'datavisyn-bot' && github.actor != 'anita-steiner' }}
        run: |
          echo 'Wrong actor!'
          exit 1
      - name: echo inputs
        id: checked_inputs
        run: |
          repository=${{ github.event.repository.name }}
          echo $KNOWN_REPOSITORIES
          checked_known_repos="$(echo $KNOWN_REPOSITORIES | jq '.')"
          checked_known_repos="${checked_known_repos//$'\n'/''}"
          checked_repository="$(echo $KNOWN_REPOSITORIES | jq --arg var $repository '.[$var]')"
          release_version="$(echo $checked_repository | jq -r '.version')"
          echo ::set-output name=known_repositories::${checked_known_repos}
          echo ::set-output name=repository::${checked_repository}
          echo ::set-output name=release_version::${release_version}
        env:
          KNOWN_REPOSITORIES: ${{ github.event.inputs.known_repositories }} # use github.event.inputs instead of inputs ?? 
      - name: check repository
        run: |
          echo "check repository"
          echo ${{ steps.checked_inputs.outputs.known_repositories }}
          echo ${{ steps.checked_inputs.outputs.repository }}
          echo ${{ steps.checked_inputs.outputs.release_version }}
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        continue-on-error: true
        name: get latest release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # - name: check version
      #   id: check_version
      #   if: ${{ steps.get_latest_release.outputs.status == 200 }}
      #   run: |
      #     echo "latest release: ${{ steps.get_latest_release.outputs.data }}"
      #     echo "status: ${{ steps.get_latest_release.outputs.status }}"
      #     echo "release version: ${{ steps.checked_inputs.outputs.release_version }}"
      #     if [ "${{ steps.checked_inputs.outputs.release_version }}" == "${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}" ]; then
      #       echo "nothing todo!"
      #       exit 1 
      #       # check if exit 1 is really the best solution
      #     fi  
      # - name: error handling
      #   if: ${{ steps.get_latest_release.outputs.status != 404 }}
      #   run: exit 1              
      - name: create release branch
        run: |
          echo "create release branch"
          git checkout release/${{ steps.checked_inputs.outputs.release_version }}
          # git checkout -b release/${{ steps.checked_inputs.outputs.release_version }}               
      - name: prepare release
        run: |
          # change develop git references with version references in package.json and requirements.txt
          repositories="$(echo $KNOWN_REPOSITORIES | jq '.')"  
          readarray -t my_array < <(echo $KNOWN_REPOSITORIES | jq -rc '. | keys[]')
          for repository in "${my_array[@]}"; do
            npm_version=$(echo $repositories | jq -r --arg var $repository '.[$var].npm_version')
            npm_develop=$(echo $repositories | jq -r --arg var $repository '.[$var].npm_develop')
            pip_version=$(echo $repositories | jq -r --arg var $repository '.[$var].pip_version')
            pip_develop=$(echo $repositories | jq -r --arg var $repository '.[$var].pip_develop')
            echo $repository: $npm_version $npm_develop $pip_version $pip_develop
            if [[ $npm_version != null && $npm_develop != null ]] ; then
              sed -i "s|\"$repository\": \"$npm_develop\"|\"$repository\": \"$npm_version\"|gI" ./package.json
            fi
            if [[ $pip_version != null && $pip_develop != null ]] ; then
              sed -i "s|$pip_develop|$pip_version|gI" ./requirements.txt
            fi
          done
          version=$(jq -r '.version' ./package.json)
          # change version in package.json
          sed -i "s|\"version\": \"$version\"|\"version\": \"${{ steps.checked_inputs.outputs.release_version }}\"|gI" ./package.json
          cat ./package.json
          cat ./requirements.txt
          #change version of github action references
          find ./.github/workflows/ -name '*.yml' -exec sed -i "s/@main/@$GA_VERSION/g" {} \;
        env:
          KNOWN_REPOSITORIES: ${{ github.event.inputs.known_repositories }}
          GA_VERSION: ${{ github.event.inputs.ga_version }} 
      - name: create release notes
        id: release_notes
        run: |
          echo "create release notes"
          readarray -t my_array < <(git log 'origin/main..develop'  --pretty=format:%s)
          readme="## Release notes\n"
          commit_titles=""
          for logs in "${my_array[@]}"; do
            if [[ ${logs,,} != merge* && ${logs,,} != "prepare next dev"* ]];
            then
              commit_titles="$commit_titles\n* $logs"
            fi  
          done
          readme="$readme$commit_titles\n\n### Release dependencies first\n\nIn case of dependent visyn repositories follow dependency tree from the top.\n\n"
          readme="$readme### 🏁 Finish line\n\n"
          readme="$readme* [ ] Inform colleagues and customers about the release\n"
          readme="$readme* [ ] Celebrate the new release 🥳"
          echo -e $readme
          echo ::set-output name=readme::${readme}
          echo ::set-output name=commits::${commit_titles}
      - name: setup git config
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "<>"          
      - name: push branch
        run: |
          echo "push branch" 
          # git commit -am "Prepare release ${{ steps.checked_inputs.outputs.release_version }}"
          # git push origin release/${{ steps.checked_inputs.outputs.release_version }}
      # - name: trigger build
      #   id: trigger_build  
      #   uses: datavisyn/github-action-trigger-workflow@v1
      #   with:
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      #     workflow_file_name: "build.yml"
      #     ref: "release/${{ steps.checked_inputs.outputs.release_version }}"
      #     github_user: ${{ env.GITHUB_USER }}
      # - name: create pull request
      #   id: create_pr
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: POST /repos/{owner}/{repo}/pulls
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     title: "Release ${{ steps.checked_inputs.outputs.release_version }}"
      #     body: '"${{ steps.release_notes.outputs.readme }}"'
      #     head: "release/${{ steps.checked_inputs.outputs.release_version }}"
      #     base: "main"
      #     draft: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - run: |
      #     echo "data: ${{ steps.create_pr.outputs.data }}"
      #     echo "status: ${{ steps.create_pr.outputs.status }}"
      # - name: check pr status
      #   if: ${{ steps.create_pr.outputs.status != 201 }}
      #   run: |
      #     echo "something went wrong with the pr"
      #     exit 1                                  
      # - name: merge pull request
      #   id: merge_pr
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     pull_number: ${{ fromJson(steps.create_pr.outputs.data).number }}
      #     commit_title: "Release ${{ steps.checked_inputs.outputs.release_version }}"
      #     merge_method: "squash"
      #     base: "main"
      #     draft: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: check merge status
      #   if: ${{ steps.merge_pr.outputs.status != 200 }}
      #   run: |
      #     echo "something went wrong with the merge of the pr"
      #     exit 1              
      # - name: delete release branch
      #   run: |
      #     echo "delete release branch"
      #     git branch -d release/${{ steps.checked_inputs.outputs.release_version }}
      #     git push origin --delete release/${{ steps.checked_inputs.outputs.release_version }}

      # - name: trigger main build
      #   id: trigger_build  
      #   uses: datavisyn/github-action-trigger-workflow@v1
      #   with:
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
      #     workflow_file_name: "build.yml"
      #     ref: "main"
      #     github_user: ${{ env.GITHUB_USER }}
      # - name: create release
      #   id: create_release
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: POST /repos/{owner}/{repo}/releases
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     tag_name: ${{ steps.checked_inputs.outputs.release_version }}
      #     target_commitish: main
      #     name: ${{ steps.checked_inputs.outputs.release_version }}
      #     body: '"${{ steps.release_notes.outputs.commits }}"'
      #     draft: false 
      #     prerelease: false
      #     generate_release_notes: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: check release status
      #   if: ${{ steps.create_release.outputs.status != 201 }}
      #   run: |
      #     echo "something went wrong with the creation of the release"
      #     exit 1                   
      - name: git fetch
        run: |
          echo "get fetch"
          git fetch
          git checkout -t origin/main
          git checkout develop
          git pull
      - name: merge main to develop
        run: |
          echo "merge main to develop"
          git merge origin/main
      - name: prepare develop
        run: |
          # change version git references with develop references in package.json and requirements.txt
          repositories="$(echo $KNOWN_REPOSITORIES | jq '.')"  
          readarray -t my_array < <(echo $KNOWN_REPOSITORIES | jq -rc '. | keys[]')
          for repository in "${my_array[@]}"; do
            npm_version=$(echo $repositories | jq -r --arg var $repository '.[$var].npm_version')
            npm_develop=$(echo $repositories | jq -r --arg var $repository '.[$var].npm_develop')
            pip_version=$(echo $repositories | jq -r --arg var $repository '.[$var].pip_version')
            pip_develop=$(echo $repositories | jq -r --arg var $repository '.[$var].pip_develop')
            next_dev_version=$(echo $repositories | jq -r --arg var $repository '.[$var].next_dev_version')
            echo $repository: $npm_version $npm_develop $pip_version $pip_develop
            if [[ $npm_version != null && $npm_develop != null ]] ; then
              sed -i "s|\"$repository\": \"$npm_version\"|\"$repository\": \"$npm_develop\"|gI" ./package.json
            fi
            if [[ $pip_version != null && $pip_develop != null ]] ; then
              sed -i "s|$pip_version|$pip_develop|gI" ./requirements.txt
            fi
          done
          # change version in package.json
          version=$(jq -r '.version' ./package.json)
          sed -i "s|\"version\": \"$version\"|\"version\": \"$next_dev_version\"|gI" ./package.json
          cat ./package.json
          cat ./requirements.txt
          #change version of github action references
          find ./.github/workflows/ -name '*.yml' -exec sed -i "s/@$GA_VERSION/@main/g" {} \;
        env:
          KNOWN_REPOSITORIES: ${{ github.event.inputs.known_repositories }}
          GA_VERSION: ${{ github.event.inputs.ga_version }}            
      - name: push develop
        run: |
          echo "push develop"
          git add .
          git commit --allow-empty -am "Prepare next development"
          git push origin develop
