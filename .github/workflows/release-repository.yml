name: Release Repository

on: 
  workflow_call:
    inputs:
      known_repositories:
        description: "repositories, that are known in the datavisyn eco-system"
        required: true
        type: string

jobs:
  release-repository:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Wrong actor
        if: ${{ github.actor != 'datavisyn-bot' && github.actor != 'anita-steiner' }}
        run: |
          echo 'Wrong actor!'
          exit 1
      - name: echo inputs
        id: checked_inputs
        run: |
          REPOSITORY=${{ github.event.repository.name }}
          echo $KNOWN_REPOSITORIES
          CHECKED_KNOWN_REPOS="$(echo $KNOWN_REPOSITORIES | jq '.')"
          CHECKED_KNOWN_REPOS="${CHECKED_KNOWN_REPOS//$'\n'/''}"
          CHECKED_REPOSITORY="$(echo $KNOWN_REPOSITORIES | jq --arg var $REPOSITORY '.[$var]')"
          RELEASE_VERSION="$(echo $CHECKED_REPOSITORY | jq -r '.version')"
          echo ::set-output name=known_repositories::${CHECKED_KNOWN_REPOS}
          echo ::set-output name=repository::${CHECKED_REPOSITORY}
          echo ::set-output name=release_version::${RELEASE_VERSION}
        env:
          KNOWN_REPOSITORIES: ${{ github.event.inputs.known_repositories }} # use github.event.inputs instead of inputs ?? 
      - name: check repository
        run: |
          echo "check repository"
          echo ${{ steps.checked_inputs.outputs.known_repositories }}
          echo ${{ steps.checked_inputs.outputs.repository }}
          echo ${{ steps.checked_inputs.outputs.release_version }}
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        continue-on-error: true
        name: get latest release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: check version
        id: check_version
        if: ${{ steps.get_latest_release.outputs.status == 200 }}
        run: |
          echo "latest release: ${{ steps.get_latest_release.outputs.data }}"
          echo "status: ${{ steps.get_latest_release.outputs.status }}"
          echo "release version: ${{ steps.checked_inputs.outputs.release_version }}"
          if [${{ steps.checked_inputs.outputs.release_version }} == ${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}]; then
            echo "nothing todo!"
            exit 1
      - name: error handling
        if: ${{ steps.get_latest_release.outputs.status != 404 }}
        run: exit 1              
      - name: create release branch
        run: |
          echo "create release branch"
          git checkout release/${{ steps.checked_inputs.outputs.release_version }}
          # git checkout -b release/${{ steps.checked_inputs.outputs.release_version }}               
      - name: changes for release
        run: |
          REPOSITORIES="$(echo $KNOWN_REPOSITORIES | jq '.')"  
          readarray -t my_array < <(echo $KNOWN_REPOSITORIES | jq -rc '. | keys[]')
          for repository in "${my_array[@]}"; do
            npm_version=$(echo $REPOSITORIES | jq -r --arg var $repository '.[$var].npm_version')
            npm_develop=$(echo $REPOSITORIES | jq -r --arg var $repository '.[$var].npm_develop')
            pip_version=$(echo $REPOSITORIES | jq -r --arg var $repository '.[$var].pip_version')
            pip_develop=$(echo $REPOSITORIES | jq -r --arg var $repository '.[$var].pip_develop')
            echo $repository: $npm_version $npm_develop $pip_version $pip_develop
            if [[ $npm_version != null && $npm_develop != null ]] ; then
              sed -i "s|\"$repository\": \"$npm_develop\"|\"$repository\": \"$npm_version\"|gI" ./package.json
            fi
            if [[ $pip_version != null && $pip_develop != null ]] ; then
              sed -i "s|$pip_develop|$pip_version|gI" ./requirements.txt
            fi
          done
          version=$(jq -r '.version' ./package.json)
          sed -i "s|\"version\": \"$version\"|\"version\": \"${{ steps.checked_inputs.outputs.release_version }}\"|gI" ./package.json
          cat ./package.json
          cat ./requirements.txt
        env:
          KNOWN_REPOSITORIES: ${{ github.event.inputs.known_repositories }}  
      - name: create release notes
        id: release_notes
        run: |
          echo "create release notes"
          readarray -t my_array < <(git log 'origin/master..develop'  --pretty=format:%s)
          README="## Release notes\n"
          COMMIT_TITLES=""
          for logs in "${my_array[@]}"; do
            if [[ ${logs,,} != merge* && ${logs,,} != "prepare next dev"* ]];
            then
              COMMIT_TITLES="$COMMIT_TITLES\n* $logs"
            fi  
          done
          README="$README$COMMIT_TITLES\n\n### Release dependencies first\n\nIn case of dependent visyn repositories follow dependency tree from the top.\n\n"
          README="$README### 🏁 Finish line\n\n"
          README="$README* [ ] Inform colleagues and customers about the release\n"
          README="$README* [ ] Celebrate the new release 🥳"
          echo -e $README
          echo ::set-output name=readme::${README}
          echo ::set-output name=commits::${COMMIT_TITLES}
      - name: setup git config
        run: |
          git config user.name "datavisyn-bot"
          git config user.email "<>"          
      - name: push branch
        run: |
          echo "push branch" 
          # git commit -am "Prepare release ${{ steps.checked_inputs.outputs.release_version }}"
          # git push origin release/${{ steps.checked_inputs.outputs.release_version }}
      - name: trigger build        
        uses: datavisyn/github-workflows/.github/actions/trigger-workflow-and-wait/action.yml@develop
        with:
          owner: ${{ steps.release-repository.outputs.owner }}
          # repo:  ${{ matrix.repository }}
          repo: test_release_repo
          github_token: ${{ secrets.DATAVISYN_BOT_MAINTENANCE_TOKEN }}
          workflow_file_name: "release.yml"
          ref: "develop"
          github_user: ${{ env.GITHUB_USER }}
          client_payload: ${{ steps.release-repository.outputs.client_payload }}          
      - name: create pr
        run: |
          echo "create pr"
          echo -e "readme: ${{ steps.release_notes.outputs.readme }}"
          echo -e "commits: ${{ steps.release_notes.outputs.commits }}"
      - uses: octokit/request-action@v2.x
        id: create_release
        with:
          route: POST /repos/{owner}/{repo}/pulls
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          title: "Release ${{ steps.checked_inputs.outputs.release_version }}"
          body: '"${{ steps.release_notes.outputs.readme }}"'
          head: "release/${{ steps.checked_inputs.outputs.release_version }}"
          base: "master"
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          echo "data: ${{ steps.create_release.outputs.data }}"
          echo "status: ${{ steps.create_release.outputs.status }}"                 
      - name: merge pr
        run: |
          echo "merge pr"
      - name: get master branch
        run: |
          echo "get master branch"
      - name: create release and tag
        run: |
          echo "create release and tag"
      - name: merge master to develop
        run: |
          echo "merge master to develop"
      - name: prepare develop
        run: |
          echo "prepare develop"
      - name: push develop
        run: |
          echo "push develop" 
