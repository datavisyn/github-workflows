name: Release Repository

on: 
  workflow_call:
    inputs:
      known_repositories:
        description: "repositories, that are known in the datavisyn eco-system"
        required: true
        type: string

jobs:
  release-repository:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2       
      - id: checked-inputs
        name: echo inputs
        run: |
          echo $KNOWN_REPOSITORIES
          echo ${{ github.repository }}
          REPOSITORY=${{ github.event.repository.name }}
          CHECKED_KNOWN_REPOS="$(echo $KNOWN_REPOSITORIES | jq '.')"
          CHECKED_REPOSITORY="$(echo $KNOWN_REPOSITORIES | jq --arg var $REPOSITORY '.[$var]')"
          echo ::set-output name=known_repositories::${CHECKED_KNOWN_REPOS}
          echo ::set-output name=repository::${CHECKED_REPOSITORY}
        env:
          KNOWN_REPOSITORIES: ${{ inputs.known_repositories}}  
      - name: check repository
        run: |
          echo "check repository"
          echo ${{ steps.checked-inputs.outputs.known_repositories }}
          echo ${{ steps.checked-inputs.outputs.repository }}
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        name: get latest release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: "echo latest release: ${{ steps.get_latest_release.outputs.data }}"
      - name: "Release cound not be found. Request failed with status ${{ steps.get_release.outputs.status }}"
        if: ${{ failure() }}                        
      - name: read known repos
        run: |
          echo "read known repos"          
      - name: checkout Repo
        run: |
          echo "checkout repo"
      - name: create release branch
        run: |
          echo "create release branch"                  
      - name: changes for release
        run: |
          echo "changes for release" 
      - name: push branch
        run: |
          echo "push branch"
      - name: create release notes
        run: |
          echo "create release notes"
      - name: create pr
        run: |
          echo "create pr"           
      - name: merge pr
        run: |
          echo "merge pr"
      - name: get master branch
        run: |
          echo "get master branch"
      - name: create release and tag
        run: |
          echo "create release and tag"
      - name: merge master to develop
        run: |
          echo "merge master to develop"
      - name: prepare develop
        run: |
          echo "prepare develop"
      - name: push develop
        run: |
          echo "push develop" 
