name: build-workspace-product

on:
  workflow_call:
    secrets:
      DATAVISYN_BOT_REPO_TOKEN:
        required: false
      DV_BOT_USER:
        required: false
      DV_CUSTOMERS:
        required: true
      DV_AWS_ECR_ROLE:
        required: false
      DV_AWS_REGION:
        required: false
      DV_AWS_ECR_REGISTRY:
        required: false
      NODE_VERSION:
        required: false
      PYTHON_VERSION:
        required: false
      GITLAB_TOKEN:
        required: false
      GITLAB_HOST:
        required: false

concurrency:
  group: '${{ github.workflow }}-${{ github.ref || github.head_ref }}'
  cancel-in-progress: true

env:
  GENERATOR_VERSION: "develop"
  TIME_ZONE: "Europe/Vienna"
  NODE_VERSION: "16.16"
  PYTHON_VERSION: "3.10"
  WORKFLOW_BRANCH: "new_deployment"
  PYTHON_BASE_IMAGE: "python:3.10.8-slim-bullseye"
  DATAVISYN_PYTHON_BASE_IMAGE: "188237246440.dkr.ecr.eu-central-1.amazonaws.com/datavisyn/base/python:main"
  DATAVISYN_NGINX_BASE_IMAGE: "188237246440.dkr.ecr.eu-central-1.amazonaws.com/datavisyn/base/nginx:main"

permissions:
  id-token: write
  contents: read

jobs:
  prepare-build:
    outputs:
      app: ${{ steps.get-parameters.outputs.app }}
      api_repo: ${{ steps.get-parameters.outputs.api_repo }}
      web_repo: ${{ steps.get-parameters.outputs.web_repo }}
      develop: ${{ steps.get-parameters.outputs.develop }}
      sub_app: ${{ steps.get-parameters.outputs.sub_app }}
      aws: ${{ steps.get-parameters.outputs.aws }}
      customer: ${{ steps.get-parameters.outputs.customer }}
      image_tag1: ${{ steps.get-parameters.outputs.image_tag1 }}
      image_tag2: ${{ steps.get-parameters.outputs.image_tag2 }}
      build_time: ${{ steps.get-parameters.outputs.build_time }}
      build_node: ${{ steps.get-parameters.outputs.build_node }}
      build_python: ${{ steps.get-parameters.outputs.build_python }}
    runs-on: ubuntu-20.04
    steps:
      # checkout specific repository
      - uses: actions/checkout@v3
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - name: lint dockerfiles
        id: lint-docker
        uses: ./tmp/github-workflows/.github/actions/lint-docker
        with:
          config: .github/linters/.hadolint.yaml
          recursive: true
      - name: show dockerfile lint error
        if: ( steps.lint-docker.outcome == 'failure' )
        run: |
          echo ${{ steps.lint-docker.outcome }}
          echo -e "#### Docker Lint Result: ${{ steps.lint-docker.outputs.results }}"
      - name: lint github action files
        id: lint-ga
        uses: ./tmp/github-workflows/.github/actions/lint-github-actions
      - uses: ./tmp/github-workflows/.github/actions/get-product-parameters
        id: get-parameters
        with:
          dv_customers: ${{ secrets.DV_CUSTOMERS }}
          repository_name: ${{ github.event.repository.name }}
          branch_name: ${{ github.ref }}
          time_zone: ${{ env.TIME_ZONE }}
  build-node:
    needs: prepare-build
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare-build.outputs.build_node && needs.prepare-build.outputs.build_node == 'true'}}
    steps:
      # checkout specific product repository
      - uses: actions/checkout@v3
        with:
          token: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
      - name: Set up node version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ secrets.NODE_VERSION || env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Show node and npm version
        run: |
          corepack enable
          node -v
          npm -v
      - name: Git config
        run: |
          git config --global url."https://$_GITHUB_TOKEN@github.com/".insteadOf ssh://git@github.com/
          git config --add --global url."https://$_GITHUB_TOKEN@github.com/".insteadOf git@github.com:
          if [[ -n $GITLAB_TOKEN && -n $GITLAB_HOST ]] ; then
            echo "set gitlab config"
            git config --global url."https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git@$GITLAB_HOST:"
            git config --global url."git+https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git+ssh://git@$GITLAB_HOST:"
          fi
        env:
          _GITHUB_TOKEN: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          GITLAB_TOKEN:  ${{ secrets.GITLAB_TOKEN }}
          GITLAB_HOST:  ${{ secrets.GITLAB_HOST }}
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/create-product-workspace
        with:
          phovea_type: web
          generator_version: ${{ env.GENERATOR_VERSION }}
          github_token:  ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          app_name:  ${{ needs.prepare-build.outputs.app }}
          gitlab_token:  ${{ secrets.GITLAB_TOKEN }}
      - name: install dependencies
        run: |
          cd ./tmp/web
          touch ./yarn.lock
          cat ./package.json
          cat .yo-rc-workspace.json
          yarn install --no-immutable
      - name: show installed dependencies
        run: |
          cd ./tmp/web
          yarn info --name-only
          cat ./yarn.lock
      - name: Build
        run: |
          cd ./tmp/web
          npm run dist
      - uses: ./tmp/github-workflows/.github/actions/build-push-image
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }}
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.web_repo }}
          docker_file: ./tmp/web/deploy/web/Dockerfile
          current_directory: ./tmp/web
          image_tag: ${{ needs.prepare-build.outputs.image_tag1 }}
          build_args: |
            DATAVISYN_NGINX_BASE_IMAGE=${{ env.DATAVISYN_NGINX_BASE_IMAGE }}
          labels: |
            name=${{ needs.prepare-build.outputs.web_repo }}
            version=${{ needs.prepare-build.outputs.image_tag2 }}
            org.opencontainers.image.description=web+image+for+${{ needs.prepare-build.outputs.app }}
            org.opencontainers.image.base.name=${{ env.DATAVISYN_NGINX_BASE_IMAGE }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}/templates/web/deploy/web/Dockerfile
            org.opencontainers.image.url=${{ github.event.repository.html_url }}/templates/web/deploy/web/Dockerfile
            org.opencontainers.image.title=${{ needs.prepare-build.outputs.web_repo }}
            org.opencontainers.image.version=${{ needs.prepare-build.outputs.image_tag2 }}
            org.opencontainers.image.created=${{ needs.prepare-build.outputs.build_time }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: scan node image
        id: get-ecr-scan-result
        uses: ./tmp/github-workflows/.github/actions/get-ecr-scan-result
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }}
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.web_repo }}
          image_tag: ${{ needs.prepare-build.outputs.image_tag1 }}
      - name: check scan results
        run: |
          if [ "${{ steps.get-ecr-scan-result.outputs.critical }}" != "null" ] || [ "${{ steps.get-ecr-scan-result.outputs.high }}" != "null" ]; then
            echo "Docker image contains vulnerabilities at critical or high level"
            exit 1  #exit execution due to docker image vulnerabilities
          fi
  build-python:
    needs: prepare-build
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare-build.outputs.build_python && needs.prepare-build.outputs.build_python == 'true'}}
    steps:
      # checkout specific product repository
      - uses: actions/checkout@v3
      # need node because of the generator
      - name: Set up node version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ secrets.NODE_VERSION || env.NODE_VERSION }}
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ secrets.PYTHON_VERSION || env.PYTHON_VERSION }}
      - name: Show python and pip version
        run: |
          python --version
          pip --version
      - name: Git config
        run: |
          git config --global url."https://$_GITHUB_TOKEN@github.com/".insteadOf ssh://git@github.com/
          if [[ -n "$GITLAB_TOKEN" && -n "$GITLAB_HOST" ]] ; then
            echo "set gitlab config"
            git config --global url."https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git@$GITLAB_HOST:"
            git config --global url."git+https://$GITLAB_TOKEN@$GITLAB_HOST/".insteadOf "git+ssh://git@$GITLAB_HOST:"
          fi
        env:
          _GITHUB_TOKEN: ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          GITLAB_TOKEN:  ${{ secrets.GITLAB_TOKEN }}
          GITLAB_HOST:  ${{ secrets.GITLAB_HOST }}
      # needs wheel for make
      - name: install requirements
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      # checkout this workflow repository to get actions
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - uses: ./tmp/github-workflows/.github/actions/create-product-workspace
        with:
          phovea_type: api
          generator_version: ${{ env.GENERATOR_VERSION }}
          github_token:  ${{ github.event.repository.private == true && secrets.DATAVISYN_BOT_REPO_TOKEN || github.token }}
          app_name:  ${{ needs.prepare-build.outputs.app }}
          gitlab_token:  ${{ secrets.GITLAB_TOKEN }}
      - name: Build
        run: |
          cd ./tmp/api
          mkdir -p ./build/source
          mkdir -p ./dist_python/
          name=$(jq  -rc '.[] | select(.type == "api") | .repo' ../../phovea_product.json)
          # shellcheck disable=SC2001
          name=$(echo "$name" | sed -e 's|.*/||')
          cd "$name"
          echo "$name"
          make build
          cp -r ./build/lib/* ../build/source/
          cp -r "./${name,,}.egg-info" "../build/source/${name,,}.egg-info"
          cp -r ./dist_python/* ../dist_python/
          cd ..
          readarray -t my_array < <(jq  -rc '.[] | select(.type == "api") | .additional[]' ../../phovea_product.json)
          for additional in "${my_array[@]}"; do
            echo "$additional"
            name=$(echo "$additional" | jq  -rc '.name')
            # shellcheck disable=SC2001
            name=$(echo "$name" | sed -e 's|.*/||')
            echo "$name"
            cd "$name"
            make build
            cp -r ./build/lib/* ../build/source/
            cp -r "./${name,,}.egg-info" "../build/source/${name,,}.egg-info"
            cp -r ./dist_python/* ../dist_python/
            cd ..
          done
      - uses: ./tmp/github-workflows/.github/actions/build-push-image
        if: ${{ needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }}
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.api_repo }}
          docker_file: ./tmp/api/deploy/api/Dockerfile
          current_directory: ./tmp/api
          image_tag: ${{ needs.prepare-build.outputs.image_tag1 }}
          build_args: |
            PYTHON_BASE_IMAGE=${{ env.PYTHON_BASE_IMAGE }}
            DATAVISYN_PYTHON_BASE_IMAGE=${{ env.DATAVISYN_PYTHON_BASE_IMAGE }}
            GIT_ACCESS_TOKEN=${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
          labels: |
            name=${{ needs.prepare-build.outputs.api_repo }}
            version=${{ needs.prepare-build.outputs.image_tag2 }}
            org.opencontainers.image.description=backend image for ${{ needs.prepare-build.outputs.app }}
            org.opencontainers.image.base.name=${{ env.DATAVISYN_PYTHON_BASE_IMAGE }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}/templates/api/deploy/api/Dockerfile
            org.opencontainers.image.url=${{ github.event.repository.html_url }}/templates/api/deploy/api/Dockerfile
            org.opencontainers.image.title=${{ needs.prepare-build.outputs.api_repo }}
            org.opencontainers.image.version=${{ needs.prepare-build.outputs.image_tag2 }}
            org.opencontainers.image.created=${{ needs.prepare-build.outputs.build_time }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: scan node image
        id: get-ecr-scan-result
        uses: ./tmp/github-workflows/.github/actions/get-ecr-scan-result
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }}
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_registry: ${{ secrets.DV_AWS_ECR_REGISTRY }}
          ecr_repository: ${{ needs.prepare-build.outputs.api_repo }}
          image_tag: ${{ needs.prepare-build.outputs.image_tag1 }}
      - name: check scan results
        run: |
          if [ "${{ steps.get-ecr-scan-result.outputs.critical }}" != "null" ] || [ "${{ steps.get-ecr-scan-result.outputs.high }}" != "null" ]; then
            echo "Docker image contains vulnerabilities at critical or high level"
            exit 1  #exit execution due to docker image vulnerabilities
          fi
  deploy:
    needs: [prepare-build, build-node, build-python]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          repository: datavisyn/github-workflows
          ref: ${{ env.WORKFLOW_BRANCH }}
          path: ./tmp/github-workflows
      - name: retag images
        uses: ./tmp/github-workflows/.github/actions/retag-image
        with:
          aws_role: ${{ secrets.DV_AWS_ECR_ROLE }}
          aws_region: ${{ secrets.DV_AWS_REGION }}
          ecr_repositories: ${{ needs.prepare-build.outputs.api_repo }},${{ needs.prepare-build.outputs.web_repo }}
          current_image_tag: ${{ needs.prepare-build.outputs.image_tag1 }}
          additional_image_tag: ${{ needs.prepare-build.outputs.image_tag2 }}
      - name: trigger deployment
        if: ${{ needs.prepare-build.outputs.develop == 'true' && needs.prepare-build.outputs.aws && needs.prepare-build.outputs.aws == 'true' }}
        uses: datavisyn/github-action-trigger-workflow@v1
        with:
          owner: "datavisyn"
          repo:  "infrastructure-k8s"
          github_token: ${{ secrets.DATAVISYN_BOT_REPO_TOKEN }}
          workflow_file_name: "deploy-app.yml"
          ref: ${{ env.WORKFLOW_BRANCH }}
          github_user: ${{ secrets.DV_BOT_USER }}
          client_payload: '{ "app": "${{ needs.prepare-build.outputs.app }}", "customer": "${{ needs.prepare-build.outputs.customer }}", "stage": "develop", "sub_app": "${{ needs.prepare-build.outputs.sub_app }}", "branch": "${{ needs.prepare-build.outputs.image_tag2 }}" }'

