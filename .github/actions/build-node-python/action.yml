name: build-node-python
description: Build node sources via yarn and python via make
author: datavisyn

inputs:
  github_ro_token:
    description: "github read-only token"
    default: "admin"
    required: true
  run_parallel:
    description: "enables parallel running of node and python tasks"
    default: "true"
    required: true
  # Node
  enable_node:
    description: "enables the node part of the action"
    default: "true"
    required: true
  node_version:
    description: "node version to use"
    default: ""
    required: false
  npm_registry:
    description: "npm registry"
    required: false
  enable_node_cache:
    description: "enables the yarn cache download and upload"
    required: false
    default: "true"
  download_yarn_lock:
    description: "downloads the node-yarn-lock artifact (only available when build-node was called before)"
    required: false
    default: "false"
  upload_yarn_lock:
    description: "name of the artifact to upload the node-yarn-lock artifact"
    required: false
    default: ''
  upload_bundle:
    description: "name of the artifact to uploads the bundle artifact"
    required: false
    default: ''
  run_node_lint:
    description: "run node lint"
    default: "true"
    required: false
  run_playwright_browser_install:
    description: "run playwright browser install"
    default: "false"
    required: false
  run_node_test:
    description: "run node test"
    default: "true"
    required: false
  run_node_build:
    description: "run node build"
    default: "true"
    required: false
  run_node_bundle:
    description: "run node bundle"
    default: "false"
    required: false
  chromatic_enable:
    description: "Enable Chromatic tests"
    required: false
    default: "false"
  chromatic_project_token:
    description: "Chromatic project token"
    required: false
  # Python
  enable_python:
    description: "enables the python part of the action"
    default: "true"
    required: true
  python_version:
    description: "python version to use"
    required: false
  enable_python_cache:
    description: "deprecated and disabled as uv is usually faster anyways"
    required: false
    default: "false"
  run_python_lint:
    description: "run python lint"
    default: "true"
    required: false
  run_python_test:
    description: "run python test"
    default: "true"
    required: false
  run_python_build:
    description: "run python build"
    default: "true"
    required: false
  # Rust
  enable_rust:
    description: "enables the rust part of the action"
    default: "false"
    required: true

runs:
  using: "composite"
  steps:
    # Node
    - uses: ./tmp/github-workflows/.github/actions/get-node-version
      if: inputs.enable_node == 'true' && inputs.node_version == ''
      id: get-node-version
    - name: Set up node version
      uses: actions/setup-node@v5
      if: inputs.enable_node == 'true'
      with:
        node-version: ${{ inputs.node_version || fromJson(steps.get-node-version.outputs.node_version) }}
        registry-url: ${{ inputs.npm_registry || 'https://registry.npmjs.org/' }}
        package-manager-cache: false
    - name: Show node and npm version
      if: inputs.enable_node == 'true'
      run: |
        corepack enable
        node -v
        npm -v
      shell: bash
    # Python
    - name: Set up python
      uses: actions/setup-python@v6
      if: inputs.enable_python == 'true'
      with:
        python-version: ${{ inputs.python_version || '3.10' }}
        # cache: ${{ inputs.enable_python_cache == 'true' && 'pip' || null }} Disable cache as uv is probably faster anyways: https://github.com/actions/setup-python/issues/822
    - name: Install additional python requirements
      if: inputs.enable_python == 'true'
      run: |
        python -m pip install --upgrade pip uv
        uv pip install setuptools wheel --system
        python --version
        pip --version
        uv --version
      shell: bash
    - name: Install pgvector
      if: inputs.enable_python == 'true'
      run: |
        sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y
        sudo apt-get install postgresql-16-pgvector -y
      shell: bash
    # Rust
    - name: Install Rust
      if: inputs.enable_rust == 'true'
      run: |
        if ! command -v rustup &> /dev/null ; then
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain stable -y

          # Resolve the correct CARGO_HOME path depending on OS
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "${CARGO_HOME:-$USERPROFILE/.cargo}/bin" | sed 's|/|\\|g' >> $GITHUB_PATH
          else
            echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
          fi
          # Load cargo environment so cargo and rustc are available in this shell
          . "$HOME/.cargo/env"
        fi

        # Ensure stable rust toolchain is installed
        rustup install stable

        rustc --version
        cargo --version
      shell: bash
    # General
    - name: Git config
      if: inputs.github_ro_token != ''
      run: |
        if [ -f ~/.gitconfig ]; then
          rm ~/.gitconfig
          touch ~/.gitconfig
        fi
        git config --global --replace-all url."https://$GITHUB_TOKEN@github.com/".insteadOf ssh://git@github.com/
        git config --add --global url."https://$GITHUB_TOKEN@github".insteadOf https://github
        git config --add --global url."https://$GITHUB_TOKEN@github.com/".insteadOf git@github.com:
        cat ~/.gitconfig
      env:
        GITHUB_TOKEN: ${{ inputs.github_ro_token }}
      shell: bash
    - uses: actions/download-artifact@v4
      # TODO: Remove the variable whenever we can ensure that build-node was called before
      if: inputs.enable_node == 'true' && inputs.download_yarn_lock == 'true'
      with:
        name: node-yarn-lock
    # Enable yarn download cache, @see https://github.com/actions/cache/tree/main/save#always-save-cache and https://github.com/actions/setup-node/issues/325
    - name: Restore yarn cache
      uses: actions/cache/restore@v4
      if: inputs.enable_node == 'true' && inputs.enable_node_cache == 'true'
      with:
        # This path is the global yarn cache, because for some reason the local .yarn/cache is not used. Maybe we need to set the cacheFolder, enableGlobalCache, ... options differently? @see https://yarnpkg.com/configuration/yarnrc#cacheFolder
        path: ~/.yarn/berry/cache/
        key: yarn-download-cache-${{ hashFiles('package.json') }}
        restore-keys: |
          yarn-download-cache-
    # Parallel build
    - name: Build node and python in parallel
      id: build
      run: |
        # Run node and python in parallel

        # In case uv sync is used, sync into the system python environment
        # https://github.com/astral-sh/uv/issues/8085#issuecomment-2406665798
        export UV_PROJECT_ENVIRONMENT="${pythonLocation}"

        # Define the node sequence of commands
        node_job() {
          set -e
          for i in {1..3}; do
            echo "Attempt $i of 3: Installing dependencies..."
            yarn install --no-immutable --inline-builds && break || {
              echo "Attempt $i failed. Retrying in 5 seconds..."
              sleep 5
            }
          done

          parallel_jobs=()
          if [ "$RUN_NODE_LINT" = "true" ]; then
            parallel_jobs+=("yarn run lint --quiet")
          fi
          if [ "$RUN_NODE_TEST" = "true" ]; then
            parallel_jobs+=("yarn run test")
          fi
          if [ "$RUN_NODE_BUILD" = "true" ]; then
            parallel_jobs+=("yarn run build")
          fi
          if [ "$RUN_NODE_BUNDLE" = "true" ]; then
            parallel_jobs+=("yarn run bundle:prod || yarn run webpack:prod")
          fi
          if [ "$RUN_PLAYWRIGHT_BROWSER_INSTALL" = "true" ]; then
            parallel_jobs+=("yarn playwright install --with-deps chromium")
          fi

          parallel --jobs $1 --lb --halt-on-error 2 --verbose ::: "${parallel_jobs[@]}"
        }

        # Define the python sequence of commands
        python_job() {
          set -e
          make develop

          parallel_jobs=()
          if [ "$RUN_PYTHON_LINT" = "true" ]; then
            parallel_jobs+=("make lint check-format")
          fi
          if [ "$RUN_PYTHON_TEST" = "true" ]; then
            parallel_jobs+=("make test")
          fi
          if [ "$RUN_PYTHON_BUILD" = "true" ]; then
            parallel_jobs+=("make build")
          fi

          parallel --jobs $1 --lb --halt-on-error 2 --verbose ::: "${parallel_jobs[@]}"
        }

        # Export the functions so they can be used by GNU parallel
        export -f node_job
        export -f python_job

        # If RUN_PARALLEL is set, set --jobs to 0, otherwise to 1
        N_JOBS=1
        if [ "$RUN_PARALLEL" = "true" ]; then
          N_JOBS=0
        fi

        final_jobs=()
        if [ "$RUN_NODE" = "true" ]; then
          final_jobs+=("node_job $N_JOBS")
        fi
        if [ "$RUN_PYTHON" = "true" ]; then
          final_jobs+=("python_job $N_JOBS")
        fi

        parallel --jobs $N_JOBS --lb --halt-on-error 2 --verbose ::: "${final_jobs[@]}"
      shell: bash
      env:
        RUN_PARALLEL: ${{ inputs.run_parallel }}
        RUN_NODE: ${{ inputs.enable_node }}
        RUN_PYTHON: ${{ inputs.enable_python }}
        RUN_PLAYWRIGHT_BROWSER_INSTALL: ${{ inputs.run_playwright_browser_install }}
        RUN_NODE_LINT: ${{ inputs.run_node_lint }}
        RUN_NODE_TEST: ${{ inputs.run_node_test }}
        RUN_NODE_BUILD: ${{ inputs.run_node_build }}
        RUN_NODE_BUNDLE: ${{ inputs.run_node_bundle }}
        RUN_PYTHON_LINT: ${{ inputs.run_python_lint }}
        RUN_PYTHON_TEST: ${{ inputs.run_python_test }}
        RUN_PYTHON_BUILD: ${{ inputs.run_python_build }}
        UV_SYSTEM_PYTHON: 1  # In case uv pip is used, install into the system python environment https://docs.astral.sh/uv/guides/integration/github/#using-uv-pip
        UV_HTTP_TIMEOUT: 300  # https://docs.astral.sh/uv/reference/environment/#uv_http_timeout

    # Node
    - name: Save yarn cache
      uses: actions/cache/save@v4
      if: inputs.enable_node == 'true' && steps.build.outcome == 'success' && inputs.enable_node_cache == 'true'
      with:
        # This path is the global yarn cache, because for some reason the local .yarn/cache is not used. Maybe we need to set the cacheFolder, enableGlobalCache, ... options differently? @see https://yarnpkg.com/configuration/yarnrc#cacheFolder
        path: ~/.yarn/berry/cache/
        key: yarn-download-cache-${{ hashFiles('package.json') }}
    - uses: actions/upload-artifact@v5
      if: inputs.enable_node == 'true' && inputs.upload_yarn_lock
      with:
        name: ${{ inputs.upload_yarn_lock }}
        path: ./yarn.lock
    - uses: actions/upload-artifact@v5
      if: inputs.enable_node == 'true' && inputs.run_node_bundle == 'true' && inputs.upload_bundle
      with:
        name: ${{ inputs.upload_bundle }}
        path: ./bundles
    # Chromatic
    - name: Run Chromatic
      if: inputs.enable_node == 'true' && inputs.chromatic_enable == 'true'
      uses: chromaui/action@v12.0.0
      with:
        exitZeroOnChanges: true
        exitOnceUploaded: true
        projectToken: ${{ inputs.chromatic_project_token }}
