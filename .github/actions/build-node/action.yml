name: Build node source

inputs:
  node_version:
    description: "node version to use"
    default: "3.10"
    required: true
    type: string
  github_ro_token:  
    description: "github read-only token"
    default: "admin"
    required: true
    type: string
  npm_registry:  
    description: "npm registry"
    default: "https://registry.npmjs.org/"
    required: true
    type: string    
runs:
  using: "composite"
  steps:      
    - name: Set up node version
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        registry-url: ${{ inputs.npm_registry }}
    - name: Show node and npm version
      run: |
        npm i -g yarn@1.22.19
        yarn config set registry=https://registry.npmjs.org/
        node -v
        npm -v
      shell: bash  
    - name: Git config
      if: ${{ inputs.github_ro_token != '' }}
      run: |
        git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf ssh://git@github.com/
        git config --add --global url."https://$GITHUB_TOKEN@github.com/".insteadOf git@github.com:
        # only for tests
        #git clone --branch dist_cache git@github.com:datavisyn/tdp_core.git dist_cache
        #rm -rf dist_cache
      env: 
        GITHUB_TOKEN: ${{ inputs.github_ro_token }}
      shell: bash         
    - name: Install npm dependencies(1)
      run: yarn install
      shell: bash
    - name: Show installed npm dependencies (1)
      run: yarn list --depth=1 || true
      shell: bash
    - name: Check package-lock.json
      id: check-package-lock
      run: |
        lock_exists=false
        if [[ -f ./package-lock.json ]]; then
          lock_exists=true
        fi
        echo "Lock file exists: $lock_exists"
        echo "::set-output name=lock_exists::${lock_exists}"
      shell: bash   
    - name: Update git dependencies
      if: ${{ steps.check-package-lock.outputs.lock_exists && steps.check-package-lock.outputs.lock_exists == 'true' }}
      run: |
        readarray -t array < <(jq -r '.dependencies * (.devDependencies//{}) * (.optionalDependencies//{}) * (.peerDependencies//{}) |to_entries[] | select(.value | contains("git")) | .key' ./package.json)
        for repository in "${array[@]}"; do
          echo "update repository: $repository"
          npm update $repository
        done       
      shell: bash
    - name: Show installed npm dependencies (2)
      if: ${{ steps.check-package-lock.outputs.lock_exists && steps.check-package-lock.outputs.lock_exists == 'true' }}
      run: yarn list --depth=1 || true
      shell: bash          
    - name: Build
      run: npm run dist
      shell: bash
