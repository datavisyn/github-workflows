name: get-product-parameters
description: get product parameters for building product
author: datavisyn

inputs:
  dv_customers:
    description: "customers of datavisyn; seperated with ','"
    required: true
    type: string
  repository_name:
    description: "name of the current repository"
    required: true
  branch_name:
    description: "name of the current branch"
    required: true
  time_zone:
    description: "time zone to use to generate the image tag"
    required: true

outputs:
  app:
    description: "app name of the product"
    value: ${{ steps.get-parameters.outputs.app }}
  api_repo:
    description: "ecr repository for api"
    value: ${{ steps.get-parameters.outputs.api_repo }}
  web_repo:
    description: "ecr repository for web"
    value: ${{ steps.get-parameters.outputs.web_repo }}
  develop:
    description: "true, if the branch is a develop branch, otherwise false"
    value: ${{ steps.get-parameters.outputs.develop }}
  aws:
    description: "true, if image should be generated and pushed to aws; else false"
    value: ${{ steps.get-parameters.outputs.aws }}
  customer:
    description: "customer of the branch - depending on the branch name"
    value: ${{ steps.get-parameters.outputs.customer }}
  sub_app:
    description: "sub_app of the repository (f.e. literature) - depending on the branch name"
    value: ${{ steps.get-parameters.outputs.sub_app }}
  image_tag1:
    description: "image tag, that has the general name"
    value: ${{ steps.get-parameters.outputs.image_tag1 }}
  image_tag2:
    description: "image tag, that has a very specific name (included the current date)"
    value: ${{ steps.get-parameters.outputs.image_tag2 }}
  build_time:
    description: "build time of the current run (in RFC 3339 see <https://www.rfc-editor.org/rfc/rfc3339#section-5.6>)"
    value: ${{ steps.get-parameters.outputs.build_time }}
  build_node:
    description: "true, if node part should be built; else false"
    value: ${{ steps.get-parameters.outputs.build_node }}
  build_python:
    description: "true, if python part should be built; else false"
    value: ${{ steps.get-parameters.outputs.build_python }}
runs:
  using: "composite"
  steps:
    - name: get parameters
      id: get-parameters
      run: |
        product_name=$REPOSITORY_NAME
        post_fix=_product
        product_name=${product_name%$post_fix}
        app=$(jq  -rc '.[] | select(.type == "web") | .name' ./phovea_product.json)
        if [[ $app == null ]] ; then
          app=$(jq  -rc '.[] | select(.type == "web") | .repo' ./phovea_product.json)
          app=${app##*/}
        fi
        # build api/web
        build_node=true
        build_python=true
        check_type=$(jq  -rc '.[] | select(.type == "web")' ./phovea_product.json)
        if [[ -z $check_type ]] ; then
          build_node=false
        fi
        check_type=$(jq  -rc '.[] | select(.type == "api")' ./phovea_product.json)
        if [[ -z $check_type ]] ; then
          build_python=false
        fi
        # product tolowercase
        api_repo="${product_name,,}/server"
        web_repo="${product_name,,}/web"
        # get everything from branch name
        # branchname should look <develop|master|main>_<sub_app>_<customer>_<aws>
        # for release candidates the branch name should look like: rc_<version>_<sub_app>_<customer>_<aws>-<date>
        branch_name=$BRANCH_NAME
        branch_name_orig=${branch_name##*/}
        branch_name=$branch_name_orig
        echo $branch_name
        aws=false
        develop=false
        sub_app=''
        # check customer
        customer=''
        dv_customers=$DV_CUSTOMERS
        array=($(echo "${dv_customers}" | tr ',' "\n"))
        for c in "${array[@]}"
        do
          if [[ $BRANCH_NAME =~ _${c}_ || $BRANCH_NAME =~ _${c}- ]]; then
            branch_name=${branch_name//_$c/}
            customer=$c
            echo "customer: $customer"
            if [[ "$branch_name" == "$customer" ]]; then
              branch_name=""
            fi
          fi
        done
        if [[ -z $customer ]] ; then
          customer='datavisyn'
        fi
        sub_app=${branch_name#*_}
        aws=true
        # develop branch
        if [[ $branch_name == develop* ]] ; then
          develop=true
        fi
        # get image tags
        build_time=$(TZ=$TIME_ZONE date +%Y-%m-%dT%H%M%SZ)
        image_tag2=$branch_name_org
        image_tag1=tagged-$image_tag2-$build_time
        # echo parameters
        echo "app=$app"
        echo "api_repo=$api_repo"
        echo "web_repo=$web_repo"
        echo "develop=$develop"
        echo "aws=$aws"
        echo "customer=$customer"
        echo "sub_app=$sub_app"
        echo "build_python=$build_python"
        echo "build_node=$build_node"
        echo "build_time=$build_time"
        echo "image_tag1=$image_tag1"
        echo "image_tag2=$image_tag2"
        # echo to output
        echo "app=$app" >> "$GITHUB_OUTPUT"
        echo "api_repo=$api_repo" >> "$GITHUB_OUTPUT"
        echo "web_repo=$web_repo" >> "$GITHUB_OUTPUT"
        echo "develop=$develop" >> "$GITHUB_OUTPUT"
        echo "aws=$aws" >> "$GITHUB_OUTPUT"
        echo "customer=$customer" >> "$GITHUB_OUTPUT"
        echo "sub_app=$sub_app" >> "$GITHUB_OUTPUT"
        echo "build_time=$build_time" >> "$GITHUB_OUTPUT"
        echo "image_tag1=$image_tag1" >> "$GITHUB_OUTPUT"
        echo "image_tag2=$image_tag2" >> "$GITHUB_OUTPUT"
        echo "build_node=$build_node" >> "$GITHUB_OUTPUT"
        echo "build_python=$build_python" >> "$GITHUB_OUTPUT"
      env:
        DV_CUSTOMERS: ${{ inputs.dv_customers }}
        REPOSITORY_NAME: ${{ inputs.repository_name }}
        BRANCH_NAME: ${{ inputs.branch_name }}
        TIME_ZONE: ${{ inputs.time_zone }}
      shell: bash


