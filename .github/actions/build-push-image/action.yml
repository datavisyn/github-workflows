name: build-push-image
description: Build image and push it to AWS ECR
author: datavisyn

inputs:
  aws_role:
    description: "aws role to push to the ecr registry"
    required: true
  aws_region:
    description: "aws region to use"
    required: true
  ecr_registry:
    description: "registry where to push the image"
    required: true
  ecr_repository:
    description: "ecr repository to use"
    required: true
  docker_file:
    description: "dockerfile to use"
    required: true
  current_directory:
    description: "current directory for building the Dockerfile"
    required: true
  image_tag1:
    description: "image tag 1"
    required: true
  image_tag2:
    description: "image tag 2"
    required: false
  build_args:
    description: "List of build-time variables"
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ inputs.aws_role }}
        aws-region: ${{ inputs.aws_region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.5.3
    - name: Build, tag, and push image to Amazon ECR
      run: |
        cd $CURRENT_DIRECTORY
        build_args=''
        if [[ -n $BUILD_ARGS ]] ; then
          mapfile -t array < <(echo -e "$BUILD_ARGS")
          array=(${array[@]/''})
          build_args="${array[@]/#/--build-arg }"
          echo "$build_args"
        fi
        if [[ -z $IMAGE_TAG2 ]] ; then
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 $build_args -f $DOCKER_FILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
        else
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2 $build_args -f $DOCKER_FILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2
        fi
      env:
        ECR_REGISTRY: ${{ inputs.ecr_registry }}
        ECR_REPOSITORY: ${{ inputs.ecr_repository }}
        IMAGE_TAG1: ${{ inputs.image_tag1 }}
        IMAGE_TAG2: ${{ inputs.image_tag2 }}
        DOCKER_FILE: ${{ inputs.docker_file }}
        CURRENT_DIRECTORY: ${{ inputs.current_directory }}
        BUILD_ARGS: ${{ inputs.build_args }}
      shell: bash
    - name: Log out from Amazon ECR
      run: docker logout $ECR_REGISTRY
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      shell: bash

